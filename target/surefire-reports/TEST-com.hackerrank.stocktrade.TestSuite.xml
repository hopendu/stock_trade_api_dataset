<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.hackerrank.stocktrade.TestSuite" time="6.545" tests="19" errors="4" skipped="0" failures="6">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/linds/IdeaProjects/stock_trade_api_dataset/target/test-classes:/Users/linds/IdeaProjects/stock_trade_api_dataset/target/classes:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/2.1.1.RELEASE/spring-boot-starter-data-jpa-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-starter-aop/2.1.1.RELEASE/spring-boot-starter-aop-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-aop/5.1.3.RELEASE/spring-aop-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/aspectj/aspectjweaver/1.9.2/aspectjweaver-1.9.2.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/2.1.1.RELEASE/spring-boot-starter-jdbc-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/com/zaxxer/HikariCP/3.2.0/HikariCP-3.2.0.jar:/Users/linds/.m2/repository/org/springframework/spring-jdbc/5.1.3.RELEASE/spring-jdbc-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/javax/transaction/javax.transaction-api/1.3/javax.transaction-api-1.3.jar:/Users/linds/.m2/repository/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar:/Users/linds/.m2/repository/javax/activation/javax.activation-api/1.2.0/javax.activation-api-1.2.0.jar:/Users/linds/.m2/repository/org/hibernate/hibernate-core/5.3.7.Final/hibernate-core-5.3.7.Final.jar:/Users/linds/.m2/repository/org/jboss/logging/jboss-logging/3.3.2.Final/jboss-logging-3.3.2.Final.jar:/Users/linds/.m2/repository/javax/persistence/javax.persistence-api/2.2/javax.persistence-api-2.2.jar:/Users/linds/.m2/repository/org/javassist/javassist/3.23.1-GA/javassist-3.23.1-GA.jar:/Users/linds/.m2/repository/net/bytebuddy/byte-buddy/1.9.5/byte-buddy-1.9.5.jar:/Users/linds/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar:/Users/linds/.m2/repository/org/jboss/jandex/2.0.5.Final/jandex-2.0.5.Final.jar:/Users/linds/.m2/repository/com/fasterxml/classmate/1.4.0/classmate-1.4.0.jar:/Users/linds/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:/Users/linds/.m2/repository/org/hibernate/common/hibernate-commons-annotations/5.0.4.Final/hibernate-commons-annotations-5.0.4.Final.jar:/Users/linds/.m2/repository/org/springframework/data/spring-data-jpa/2.1.3.RELEASE/spring-data-jpa-2.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/data/spring-data-commons/2.1.3.RELEASE/spring-data-commons-2.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-orm/5.1.3.RELEASE/spring-orm-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-context/5.1.3.RELEASE/spring-context-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-tx/5.1.3.RELEASE/spring-tx-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-beans/5.1.3.RELEASE/spring-beans-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:/Users/linds/.m2/repository/org/springframework/spring-aspects/5.1.3.RELEASE/spring-aspects-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-starter-web/2.1.1.RELEASE/spring-boot-starter-web-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-starter/2.1.1.RELEASE/spring-boot-starter-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-starter-logging/2.1.1.RELEASE/spring-boot-starter-logging-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar:/Users/linds/.m2/repository/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar:/Users/linds/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.11.1/log4j-to-slf4j-2.11.1.jar:/Users/linds/.m2/repository/org/apache/logging/log4j/log4j-api/2.11.1/log4j-api-2.11.1.jar:/Users/linds/.m2/repository/org/slf4j/jul-to-slf4j/1.7.25/jul-to-slf4j-1.7.25.jar:/Users/linds/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar:/Users/linds/.m2/repository/org/yaml/snakeyaml/1.23/snakeyaml-1.23.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-starter-json/2.1.1.RELEASE/spring-boot-starter-json-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.9.7/jackson-datatype-jdk8-2.9.7.jar:/Users/linds/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.9.7/jackson-datatype-jsr310-2.9.7.jar:/Users/linds/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.9.7/jackson-module-parameter-names-2.9.7.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/2.1.1.RELEASE/spring-boot-starter-tomcat-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/9.0.13/tomcat-embed-core-9.0.13.jar:/Users/linds/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/9.0.13/tomcat-embed-el-9.0.13.jar:/Users/linds/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/9.0.13/tomcat-embed-websocket-9.0.13.jar:/Users/linds/.m2/repository/org/hibernate/validator/hibernate-validator/6.0.13.Final/hibernate-validator-6.0.13.Final.jar:/Users/linds/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar:/Users/linds/.m2/repository/org/springframework/spring-web/5.1.3.RELEASE/spring-web-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-webmvc/5.1.3.RELEASE/spring-webmvc-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-expression/5.1.3.RELEASE/spring-expression-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/com/h2database/h2/1.4.197/h2-1.4.197.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-devtools/2.1.1.RELEASE/spring-boot-devtools-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot/2.1.1.RELEASE/spring-boot-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/2.1.1.RELEASE/spring-boot-autoconfigure-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-test/5.1.3.RELEASE/spring-test-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-core/5.1.3.RELEASE/spring-core-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-jcl/5.1.3.RELEASE/spring-jcl-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-test/2.1.1.RELEASE/spring-boot-test-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/2.1.1.RELEASE/spring-boot-test-autoconfigure-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/junit/junit/4.12/junit-4.12.jar:/Users/linds/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/linds/.m2/repository/com/hackerrank/applications/junit-ordered-test-runner/1.0.2/junit-ordered-test-runner-1.0.2.jar:/Users/linds/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.7/jackson-databind-2.9.7.jar:/Users/linds/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar:/Users/linds/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.9.7/jackson-core-2.9.7.jar:/Users/linds/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar:/Users/linds/.m2/repository/org/jdom/jdom/1.1/jdom-1.1.jar:"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="GB"/>
    <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk-17.0.3.1.jdk/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/linds/IdeaProjects/stock_trade_api_dataset/target/surefire/surefirebooter-20250208100642233_3.jar /Users/linds/IdeaProjects/stock_trade_api_dataset/target/surefire 2025-02-08T10-06-42_114-jvmRun1 surefire-20250208100642233_1tmp surefire_0-20250208100642233_2tmp"/>
    <property name="http.nonProxyHosts" value="dns.google|*.dns.google|one.one.one.one|*.one.one.one.one|ocsp.digicert.com|*.ocsp.digicert.com"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/linds/IdeaProjects/stock_trade_api_dataset/target/test-classes:/Users/linds/IdeaProjects/stock_trade_api_dataset/target/classes:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/2.1.1.RELEASE/spring-boot-starter-data-jpa-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-starter-aop/2.1.1.RELEASE/spring-boot-starter-aop-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-aop/5.1.3.RELEASE/spring-aop-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/aspectj/aspectjweaver/1.9.2/aspectjweaver-1.9.2.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/2.1.1.RELEASE/spring-boot-starter-jdbc-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/com/zaxxer/HikariCP/3.2.0/HikariCP-3.2.0.jar:/Users/linds/.m2/repository/org/springframework/spring-jdbc/5.1.3.RELEASE/spring-jdbc-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/javax/transaction/javax.transaction-api/1.3/javax.transaction-api-1.3.jar:/Users/linds/.m2/repository/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar:/Users/linds/.m2/repository/javax/activation/javax.activation-api/1.2.0/javax.activation-api-1.2.0.jar:/Users/linds/.m2/repository/org/hibernate/hibernate-core/5.3.7.Final/hibernate-core-5.3.7.Final.jar:/Users/linds/.m2/repository/org/jboss/logging/jboss-logging/3.3.2.Final/jboss-logging-3.3.2.Final.jar:/Users/linds/.m2/repository/javax/persistence/javax.persistence-api/2.2/javax.persistence-api-2.2.jar:/Users/linds/.m2/repository/org/javassist/javassist/3.23.1-GA/javassist-3.23.1-GA.jar:/Users/linds/.m2/repository/net/bytebuddy/byte-buddy/1.9.5/byte-buddy-1.9.5.jar:/Users/linds/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar:/Users/linds/.m2/repository/org/jboss/jandex/2.0.5.Final/jandex-2.0.5.Final.jar:/Users/linds/.m2/repository/com/fasterxml/classmate/1.4.0/classmate-1.4.0.jar:/Users/linds/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:/Users/linds/.m2/repository/org/hibernate/common/hibernate-commons-annotations/5.0.4.Final/hibernate-commons-annotations-5.0.4.Final.jar:/Users/linds/.m2/repository/org/springframework/data/spring-data-jpa/2.1.3.RELEASE/spring-data-jpa-2.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/data/spring-data-commons/2.1.3.RELEASE/spring-data-commons-2.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-orm/5.1.3.RELEASE/spring-orm-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-context/5.1.3.RELEASE/spring-context-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-tx/5.1.3.RELEASE/spring-tx-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-beans/5.1.3.RELEASE/spring-beans-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:/Users/linds/.m2/repository/org/springframework/spring-aspects/5.1.3.RELEASE/spring-aspects-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-starter-web/2.1.1.RELEASE/spring-boot-starter-web-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-starter/2.1.1.RELEASE/spring-boot-starter-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-starter-logging/2.1.1.RELEASE/spring-boot-starter-logging-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar:/Users/linds/.m2/repository/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar:/Users/linds/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.11.1/log4j-to-slf4j-2.11.1.jar:/Users/linds/.m2/repository/org/apache/logging/log4j/log4j-api/2.11.1/log4j-api-2.11.1.jar:/Users/linds/.m2/repository/org/slf4j/jul-to-slf4j/1.7.25/jul-to-slf4j-1.7.25.jar:/Users/linds/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar:/Users/linds/.m2/repository/org/yaml/snakeyaml/1.23/snakeyaml-1.23.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-starter-json/2.1.1.RELEASE/spring-boot-starter-json-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.9.7/jackson-datatype-jdk8-2.9.7.jar:/Users/linds/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.9.7/jackson-datatype-jsr310-2.9.7.jar:/Users/linds/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.9.7/jackson-module-parameter-names-2.9.7.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/2.1.1.RELEASE/spring-boot-starter-tomcat-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/9.0.13/tomcat-embed-core-9.0.13.jar:/Users/linds/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/9.0.13/tomcat-embed-el-9.0.13.jar:/Users/linds/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/9.0.13/tomcat-embed-websocket-9.0.13.jar:/Users/linds/.m2/repository/org/hibernate/validator/hibernate-validator/6.0.13.Final/hibernate-validator-6.0.13.Final.jar:/Users/linds/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar:/Users/linds/.m2/repository/org/springframework/spring-web/5.1.3.RELEASE/spring-web-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-webmvc/5.1.3.RELEASE/spring-webmvc-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-expression/5.1.3.RELEASE/spring-expression-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/com/h2database/h2/1.4.197/h2-1.4.197.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-devtools/2.1.1.RELEASE/spring-boot-devtools-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot/2.1.1.RELEASE/spring-boot-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/2.1.1.RELEASE/spring-boot-autoconfigure-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-test/5.1.3.RELEASE/spring-test-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-core/5.1.3.RELEASE/spring-core-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/spring-jcl/5.1.3.RELEASE/spring-jcl-5.1.3.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-test/2.1.1.RELEASE/spring-boot-test-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/2.1.1.RELEASE/spring-boot-test-autoconfigure-2.1.1.RELEASE.jar:/Users/linds/.m2/repository/junit/junit/4.12/junit-4.12.jar:/Users/linds/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/linds/.m2/repository/com/hackerrank/applications/junit-ordered-test-runner/1.0.2/junit-ordered-test-runner-1.0.2.jar:/Users/linds/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.7/jackson-databind-2.9.7.jar:/Users/linds/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar:/Users/linds/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.9.7/jackson-core-2.9.7.jar:/Users/linds/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar:/Users/linds/.m2/repository/org/jdom/jdom/1.1/jdom-1.1.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/linds"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2022-04-22"/>
    <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk-17.0.3.1.jdk/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/linds/IdeaProjects/stock_trade_api_dataset"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="surefire.real.class.path" value="/Users/linds/IdeaProjects/stock_trade_api_dataset/target/surefire/surefirebooter-20250208100642233_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="dns.google|*.dns.google|one.one.one.one|*.one.one.one.one|ocsp.digicert.com|*.ocsp.digicert.com"/>
    <property name="java.runtime.version" value="17.0.3.1+2-LTS-6"/>
    <property name="user.name" value="linds"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="12.7.2"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="/Users/linds/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="/var/folders/v6/xktfrtqd19s9n3hh_b_w364h0000gn/T/"/>
    <property name="java.version" value="17.0.3.1"/>
    <property name="user.dir" value="/Users/linds/IdeaProjects/stock_trade_api_dataset"/>
    <property name="os.arch" value="x86_64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/linds/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="17.0.3.1+2-LTS-6"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="socksNonProxyHosts" value="dns.google|*.dns.google|one.one.one.one|*.one.one.one.one|ocsp.digicert.com|*.ocsp.digicert.com"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="createTrade" classname="com.hackerrank.stocktrade.requests.TradesControllerTest" time="4.71">
    <error message="Request processing failed; nested exception is org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade" type="org.springframework.web.util.NestedServletException"><![CDATA[org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1013)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:71)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:166)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:182)
	at com.hackerrank.stocktrade.requests.TradesControllerTest.createTrade(TradesControllerTest.java:406)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
Caused by: org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:351)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:253)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:153)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy2/jdk.proxy2.$Proxy105.save(Unknown Source)
	at com.hackerrank.stocktrade.service.TradeService.addTrade(TradeService.java:22)
	at com.hackerrank.stocktrade.controller.TradesController.addTrade(TradesController.java:26)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	... 70 more
Caused by: org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade
	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:90)
	at org.hibernate.loader.entity.EntityLoader.loadByUniqueKey(EntityLoader.java:144)
	at org.hibernate.persister.entity.AbstractEntityPersister.loadByUniqueKey(AbstractEntityPersister.java:2351)
	at org.hibernate.type.EntityType.loadByUniqueKey(EntityType.java:739)
	at org.hibernate.type.EntityType.resolve(EntityType.java:467)
	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172)
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129)
	at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:1151)
	at org.hibernate.loader.Loader.processResultSet(Loader.java:1010)
	at org.hibernate.loader.Loader.doQuery(Loader.java:948)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:340)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:310)
	at org.hibernate.loader.Loader.loadEntity(Loader.java:2281)
	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:64)
	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:54)
	at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:4269)
	at org.hibernate.event.internal.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:511)
	at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:481)
	at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:222)
	at org.hibernate.event.internal.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:281)
	at org.hibernate.event.internal.DefaultLoadEventListener.doOnLoad(DefaultLoadEventListener.java:124)
	at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:92)
	at org.hibernate.internal.SessionImpl.fireLoad(SessionImpl.java:1257)
	at org.hibernate.internal.SessionImpl.access$1900(SessionImpl.java:207)
	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.doLoad(SessionImpl.java:2874)
	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.load(SessionImpl.java:2848)
	at org.hibernate.internal.SessionImpl.get(SessionImpl.java:1098)
	at org.hibernate.event.internal.DefaultMergeEventListener.entityIsDetached(DefaultMergeEventListener.java:290)
	at org.hibernate.event.internal.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:170)
	at org.hibernate.event.internal.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:69)
	at org.hibernate.internal.SessionImpl.fireMerge(SessionImpl.java:901)
	at org.hibernate.internal.SessionImpl.merge(SessionImpl.java:887)
	at jdk.internal.reflect.GeneratedMethodAccessor53.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:350)
	at jdk.proxy2/jdk.proxy2.$Proxy103.merge(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor53.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:308)
	at jdk.proxy2/jdk.proxy2.$Proxy103.merge(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:492)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	... 94 more
]]></error>
    <system-out><![CDATA[10:06:42.818 [main] DEBUG org.springframework.test.context.junit4.rules.SpringClassRule - Applying SpringClassRule to test class [com.hackerrank.stocktrade.requests.TradesControllerTest]
10:06:42.826 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate]
10:06:42.840 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)]
10:06:42.862 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [com.hackerrank.stocktrade.requests.TradesControllerTest] from class [org.springframework.boot.test.context.SpringBootTestContextBootstrapper]
10:06:42.878 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.hackerrank.stocktrade.requests.TradesControllerTest], using SpringBootContextLoader
10:06:42.881 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.hackerrank.stocktrade.requests.TradesControllerTest]: class path resource [com/hackerrank/stocktrade/requests/TradesControllerTest-context.xml] does not exist
10:06:42.883 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.hackerrank.stocktrade.requests.TradesControllerTest]: class path resource [com/hackerrank/stocktrade/requests/TradesControllerTestContext.groovy] does not exist
10:06:42.883 [main] INFO org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.hackerrank.stocktrade.requests.TradesControllerTest]: no resource found for suffixes {-context.xml, Context.groovy}.
10:06:42.884 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.hackerrank.stocktrade.requests.TradesControllerTest]: TradesControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
10:06:42.936 [main] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [com.hackerrank.stocktrade.requests.TradesControllerTest]
10:06:42.991 [main] DEBUG org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider - Identified candidate component class: file [/Users/linds/IdeaProjects/stock_trade_api_dataset/target/classes/com/hackerrank/stocktrade/Application.class]
10:06:42.992 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.hackerrank.stocktrade.Application for test class com.hackerrank.stocktrade.requests.TradesControllerTest
10:06:43.059 [main] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - @TestExecutionListeners is not present for class [com.hackerrank.stocktrade.requests.TradesControllerTest]: using defaults.
10:06:43.060 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener]
10:06:43.072 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@38467116, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@5b7a7f33, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@790da477, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@5c7933ad, org.springframework.test.context.support.DirtiesContextTestExecutionListener@57bc27f5, org.springframework.test.context.transaction.TransactionalTestExecutionListener@5fb759d6, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@4b8d604b, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@5e7cd6cc, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@68c9d179, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@d554c5f, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@2dfaea86, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@15888343]
10:06:43.075 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved @ProfileValueSourceConfiguration [null] for test class [com.hackerrank.stocktrade.requests.TradesControllerTest]
10:06:43.075 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved ProfileValueSource type [class org.springframework.test.annotation.SystemProfileValueSource] for class [com.hackerrank.stocktrade.requests.TradesControllerTest]
10:06:43.077 [main] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: context [DefaultTestContext@58e1d9d testClass = TradesControllerTest, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@446a1e84 testClass = TradesControllerTest, locations = '{}', classes = '{class com.hackerrank.stocktrade.Application}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[[ImportsContextCustomizer@4f0f2942 key = [org.springframework.boot.test.autoconfigure.web.servlet.MockMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcSecurityAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebClientAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebDriverAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@1d2adfbe, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@8f4ea7c, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@2f9f7dcf, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@e7e8512, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@31304f14], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true]], class annotated with @DirtiesContext [false] with mode [null].
10:06:43.081 [main] DEBUG org.springframework.test.context.junit4.rules.SpringMethodRule - Applying SpringMethodRule to test method [public void com.hackerrank.stocktrade.requests.TradesControllerTest.createTrade() throws java.lang.Exception]
10:06:43.084 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved @ProfileValueSourceConfiguration [null] for test class [com.hackerrank.stocktrade.requests.TradesControllerTest]
10:06:43.084 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved ProfileValueSource type [class org.springframework.test.annotation.SystemProfileValueSource] for class [com.hackerrank.stocktrade.requests.TradesControllerTest]
10:06:43.106 [main] DEBUG org.springframework.test.context.support.TestPropertySourceUtils - Adding inlined properties to environment: {spring.jmx.enabled=false, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=-1}

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.1.1.RELEASE)

2025-02-08 10:06:43.374  INFO 4601 --- [           main] c.h.s.requests.TradesControllerTest      : Starting TradesControllerTest on Macbooks-15-Pro with PID 4601 (started by linds in /Users/linds/IdeaProjects/stock_trade_api_dataset)
2025-02-08 10:06:43.376  INFO 4601 --- [           main] c.h.s.requests.TradesControllerTest      : No active profile set, falling back to default profiles: default
2025-02-08 10:06:43.976  INFO 4601 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2025-02-08 10:06:44.057  INFO 4601 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 74ms. Found 2 repository interfaces.
2025-02-08 10:06:44.492  INFO 4601 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$599d6aa2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-02-08 10:06:44.694  INFO 4601 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-02-08 10:06:44.841  INFO 4601 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-02-08 10:06:44.938  INFO 4601 --- [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2025-02-08 10:06:45.000  INFO 4601 --- [           main] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.7.Final}
2025-02-08 10:06:45.002  INFO 4601 --- [           main] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2025-02-08 10:06:45.140  INFO 4601 --- [           main] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2025-02-08 10:06:45.262  INFO 4601 --- [           main] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2025-02-08 10:06:45.792 DEBUG 4601 --- [           main] org.hibernate.SQL                        : drop table trade if exists
2025-02-08 10:06:45.794 DEBUG 4601 --- [           main] org.hibernate.SQL                        : drop table user if exists
2025-02-08 10:06:45.794 DEBUG 4601 --- [           main] org.hibernate.SQL                        : drop sequence if exists hibernate_sequence
2025-02-08 10:06:45.796 DEBUG 4601 --- [           main] org.hibernate.SQL                        : create sequence hibernate_sequence start with 1 increment by 1
2025-02-08 10:06:45.798 DEBUG 4601 --- [           main] org.hibernate.SQL                        : create table trade (id bigint not null, price decimal(19,2), shares integer, symbol varchar(255), timestamp timestamp, type varchar(255), user_id bigint, primary key (id))
2025-02-08 10:06:45.803 DEBUG 4601 --- [           main] org.hibernate.SQL                        : create table user (id bigint not null, name varchar(255), primary key (id))
2025-02-08 10:06:45.804 DEBUG 4601 --- [           main] org.hibernate.SQL                        : alter table trade add constraint FK1dqm16mo3cntjlxap3iusqvyt foreign key (user_id) references user
2025-02-08 10:06:45.812  INFO 4601 --- [           main] o.h.t.schema.internal.SchemaCreatorImpl  : HHH000476: Executing import script 'org.hibernate.tool.schema.internal.exec.ScriptSourceInputNonExistentImpl@e886caf'
2025-02-08 10:06:45.814  INFO 4601 --- [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-08 10:06:46.643  INFO 4601 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2025-02-08 10:06:46.687  WARN 4601 --- [           main] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-08 10:06:46.967  INFO 4601 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2025-02-08 10:06:46.968  INFO 4601 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2025-02-08 10:06:46.979  INFO 4601 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 11 ms
2025-02-08 10:06:47.005  INFO 4601 --- [           main] c.h.s.requests.TradesControllerTest      : Started TradesControllerTest in 3.892 seconds (JVM running for 4.647)
2025-02-08 10:06:47.130 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.id=?
2025-02-08 10:06:47.133 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]
2025-02-08 10:06:47.141 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select user0_.id as id1_1_0_, user0_.name as name2_1_0_ from user user0_ where user0_.id=?
2025-02-08 10:06:47.142 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [4]
2025-02-08 10:06:47.144 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.152 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.162 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into user (name, id) values (?, ?)
2025-02-08 10:06:47.163 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [Derrick Garcia]
2025-02-08 10:06:47.164 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [BIGINT] - [1]
2025-02-08 10:06:47.165 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into trade (price, shares, symbol, timestamp, type, user_id, id) values (?, ?, ?, ?, ?, ?, ?)
2025-02-08 10:06:47.166 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [NUMERIC] - [154.77]
2025-02-08 10:06:47.166 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [INTEGER] - [11]
2025-02-08 10:06:47.167 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [ZAYO]
2025-02-08 10:06:47.167 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [TIMESTAMP] - [2016-12-28 11:44:37.0]
2025-02-08 10:06:47.169 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [5] as [VARCHAR] - [buy]
2025-02-08 10:06:47.169 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [6] as [BIGINT] - [1]
2025-02-08 10:06:47.169 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [7] as [BIGINT] - [2]
2025-02-08 10:06:47.214 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.id=?
2025-02-08 10:06:47.215 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [2]
2025-02-08 10:06:47.223 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.user_id=?
2025-02-08 10:06:47.224 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]
2025-02-08 10:06:47.227 DEBUG 4601 --- [           main] org.hibernate.SQL                        : update user set name=? where id=?
2025-02-08 10:06:47.228 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [Jennifer Long]
2025-02-08 10:06:47.228 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [BIGINT] - [1]
2025-02-08 10:06:47.230 DEBUG 4601 --- [           main] org.hibernate.SQL                        : update trade set price=?, shares=?, symbol=?, timestamp=?, type=?, user_id=? where id=?
2025-02-08 10:06:47.230 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [NUMERIC] - [153.57]
2025-02-08 10:06:47.230 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [INTEGER] - [19]
2025-02-08 10:06:47.230 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [A]
2025-02-08 10:06:47.230 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [TIMESTAMP] - [2016-12-28 13:15:52.0]
2025-02-08 10:06:47.231 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [5] as [VARCHAR] - [buy]
2025-02-08 10:06:47.231 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [6] as [BIGINT] - [1]
2025-02-08 10:06:47.231 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [7] as [BIGINT] - [2]
2025-02-08 10:06:47.239 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.id=?
2025-02-08 10:06:47.239 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [3]
2025-02-08 10:06:47.240 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select user0_.id as id1_1_0_, user0_.name as name2_1_0_ from user user0_ where user0_.id=?
2025-02-08 10:06:47.240 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [4]
2025-02-08 10:06:47.240 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.241 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.242 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into user (name, id) values (?, ?)
2025-02-08 10:06:47.242 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [Derrick Garcia]
2025-02-08 10:06:47.243 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [BIGINT] - [3]
2025-02-08 10:06:47.244 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into trade (price, shares, symbol, timestamp, type, user_id, id) values (?, ?, ?, ?, ?, ?, ?)
2025-02-08 10:06:47.244 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [NUMERIC] - [135.89]
2025-02-08 10:06:47.245 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [INTEGER] - [12]
2025-02-08 10:06:47.245 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [A]
2025-02-08 10:06:47.245 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [TIMESTAMP] - [2016-12-28 13:18:18.0]
2025-02-08 10:06:47.246 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [5] as [VARCHAR] - [buy]
2025-02-08 10:06:47.246 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [6] as [BIGINT] - [3]
2025-02-08 10:06:47.246 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [7] as [BIGINT] - [4]
2025-02-08 10:06:47.251 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.id=?
2025-02-08 10:06:47.251 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [4]
2025-02-08 10:06:47.252 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.user_id=?
2025-02-08 10:06:47.253 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [3]
2025-02-08 10:06:47.253 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select user0_.id as id1_1_0_, user0_.name as name2_1_0_ from user user0_ where user0_.id=?
2025-02-08 10:06:47.254 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [2]
2025-02-08 10:06:47.254 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.255 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into user (name, id) values (?, ?)
2025-02-08 10:06:47.256 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [Daniel Cortez]
2025-02-08 10:06:47.256 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [BIGINT] - [5]
2025-02-08 10:06:47.256 DEBUG 4601 --- [           main] org.hibernate.SQL                        : update trade set price=?, shares=?, symbol=?, timestamp=?, type=?, user_id=? where id=?
2025-02-08 10:06:47.257 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [NUMERIC] - [183.45]
2025-02-08 10:06:47.257 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [INTEGER] - [15]
2025-02-08 10:06:47.257 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [MMS]
2025-02-08 10:06:47.257 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [TIMESTAMP] - [2016-12-28 15:15:50.0]
2025-02-08 10:06:47.257 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [5] as [VARCHAR] - [buy]
2025-02-08 10:06:47.257 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [6] as [BIGINT] - [5]
2025-02-08 10:06:47.258 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [7] as [BIGINT] - [4]
2025-02-08 10:06:47.262 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.id=?
2025-02-08 10:06:47.262 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [5]
2025-02-08 10:06:47.263 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select user0_.id as id1_1_0_, user0_.name as name2_1_0_ from user user0_ where user0_.id=?
2025-02-08 10:06:47.263 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [2]
2025-02-08 10:06:47.264 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.265 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.265 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into user (name, id) values (?, ?)
2025-02-08 10:06:47.266 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [Daniel Cortez]
2025-02-08 10:06:47.266 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [BIGINT] - [6]
2025-02-08 10:06:47.267 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into trade (price, shares, symbol, timestamp, type, user_id, id) values (?, ?, ?, ?, ?, ?, ?)
2025-02-08 10:06:47.267 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [NUMERIC] - [190.73]
2025-02-08 10:06:47.267 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [INTEGER] - [10]
2025-02-08 10:06:47.267 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [WEX]
2025-02-08 10:06:47.268 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [TIMESTAMP] - [2016-12-29 09:05:23.0]
2025-02-08 10:06:47.268 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [5] as [VARCHAR] - [buy]
2025-02-08 10:06:47.268 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [6] as [BIGINT] - [6]
2025-02-08 10:06:47.268 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [7] as [BIGINT] - [7]
2025-02-08 10:06:47.273 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.id=?
2025-02-08 10:06:47.273 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [6]
2025-02-08 10:06:47.274 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select user0_.id as id1_1_0_, user0_.name as name2_1_0_ from user user0_ where user0_.id=?
2025-02-08 10:06:47.274 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [4]
2025-02-08 10:06:47.274 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.274 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.275 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into user (name, id) values (?, ?)
2025-02-08 10:06:47.276 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [Derrick Garcia]
2025-02-08 10:06:47.276 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [BIGINT] - [8]
2025-02-08 10:06:47.276 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into trade (price, shares, symbol, timestamp, type, user_id, id) values (?, ?, ?, ?, ?, ?, ?)
2025-02-08 10:06:47.276 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [NUMERIC] - [137.86]
2025-02-08 10:06:47.277 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [INTEGER] - [30]
2025-02-08 10:06:47.277 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [ZAYO]
2025-02-08 10:06:47.277 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [TIMESTAMP] - [2016-12-30 11:42:40.0]
2025-02-08 10:06:47.277 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [5] as [VARCHAR] - [buy]
2025-02-08 10:06:47.277 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [6] as [BIGINT] - [8]
2025-02-08 10:06:47.277 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [7] as [BIGINT] - [9]
2025-02-08 10:06:47.283 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.id=?
2025-02-08 10:06:47.284 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [7]
2025-02-08 10:06:47.284 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.user_id=?
2025-02-08 10:06:47.285 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [6]
2025-02-08 10:06:47.285 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select user0_.id as id1_1_0_, user0_.name as name2_1_0_ from user user0_ where user0_.id=?
2025-02-08 10:06:47.285 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [2]
2025-02-08 10:06:47.286 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.286 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into user (name, id) values (?, ?)
2025-02-08 10:06:47.286 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [Daniel Cortez]
2025-02-08 10:06:47.286 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [BIGINT] - [10]
2025-02-08 10:06:47.287 DEBUG 4601 --- [           main] org.hibernate.SQL                        : update trade set price=?, shares=?, symbol=?, timestamp=?, type=?, user_id=? where id=?
2025-02-08 10:06:47.287 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [NUMERIC] - [183.45]
2025-02-08 10:06:47.287 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [INTEGER] - [19]
2025-02-08 10:06:47.287 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [MMS]
2025-02-08 10:06:47.287 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [TIMESTAMP] - [2016-12-30 12:35:21.0]
2025-02-08 10:06:47.287 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [5] as [VARCHAR] - [buy]
2025-02-08 10:06:47.287 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [6] as [BIGINT] - [10]
2025-02-08 10:06:47.287 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [7] as [BIGINT] - [7]
2025-02-08 10:06:47.292 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.id=?
2025-02-08 10:06:47.292 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [8]
2025-02-08 10:06:47.293 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select user0_.id as id1_1_0_, user0_.name as name2_1_0_ from user user0_ where user0_.id=?
2025-02-08 10:06:47.293 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [4]
2025-02-08 10:06:47.293 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.294 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.295 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into user (name, id) values (?, ?)
2025-02-08 10:06:47.295 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [Derrick Garcia]
2025-02-08 10:06:47.295 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [BIGINT] - [11]
2025-02-08 10:06:47.296 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into trade (price, shares, symbol, timestamp, type, user_id, id) values (?, ?, ?, ?, ?, ?, ?)
2025-02-08 10:06:47.297 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [NUMERIC] - [172.35]
2025-02-08 10:06:47.297 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [INTEGER] - [11]
2025-02-08 10:06:47.297 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [WEX]
2025-02-08 10:06:47.297 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [TIMESTAMP] - [2016-12-30 13:07:19.0]
2025-02-08 10:06:47.297 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [5] as [VARCHAR] - [buy]
2025-02-08 10:06:47.298 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [6] as [BIGINT] - [11]
2025-02-08 10:06:47.298 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [7] as [BIGINT] - [12]
2025-02-08 10:06:47.301 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.id=?
2025-02-08 10:06:47.302 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [9]
2025-02-08 10:06:47.302 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.user_id=?
2025-02-08 10:06:47.302 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [8]
2025-02-08 10:06:47.303 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select user0_.id as id1_1_0_, user0_.name as name2_1_0_ from user user0_ where user0_.id=?
2025-02-08 10:06:47.303 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [3]
2025-02-08 10:06:47.303 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.user_id=?
2025-02-08 10:06:47.303 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [3]
2025-02-08 10:06:47.304 DEBUG 4601 --- [           main] org.hibernate.SQL                        : update trade set price=?, shares=?, symbol=?, timestamp=?, type=?, user_id=? where id=?
2025-02-08 10:06:47.304 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [NUMERIC] - [154.77]
2025-02-08 10:06:47.304 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [INTEGER] - [25]
2025-02-08 10:06:47.305 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [ZAYO]
2025-02-08 10:06:47.305 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [TIMESTAMP] - [2016-12-30 13:36:20.0]
2025-02-08 10:06:47.305 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [5] as [VARCHAR] - [buy]
2025-02-08 10:06:47.305 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [6] as [BIGINT] - [3]
2025-02-08 10:06:47.305 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [7] as [BIGINT] - [9]
2025-02-08 10:06:47.306 DEBUG 4601 --- [           main] org.hibernate.SQL                        : update user set name=? where id=?
2025-02-08 10:06:47.307 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [Connie Palmer]
2025-02-08 10:06:47.307 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [BIGINT] - [3]
2025-02-08 10:06:47.312 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.id=?
2025-02-08 10:06:47.312 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [10]
2025-02-08 10:06:47.312 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select user0_.id as id1_1_0_, user0_.name as name2_1_0_ from user user0_ where user0_.id=?
2025-02-08 10:06:47.313 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]
2025-02-08 10:06:47.313 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.user_id=?
2025-02-08 10:06:47.313 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]
2025-02-08 10:06:47.314 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.315 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into trade (price, shares, symbol, timestamp, type, user_id, id) values (?, ?, ?, ?, ?, ?, ?)
2025-02-08 10:06:47.316 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [NUMERIC] - [152.93]
2025-02-08 10:06:47.316 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [INTEGER] - [28]
2025-02-08 10:06:47.317 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [MMS]
2025-02-08 10:06:47.317 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [TIMESTAMP] - [2016-12-30 14:48:14.0]
2025-02-08 10:06:47.317 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [5] as [VARCHAR] - [buy]
2025-02-08 10:06:47.317 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [6] as [BIGINT] - [1]
2025-02-08 10:06:47.317 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [7] as [BIGINT] - [13]
2025-02-08 10:06:47.323 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.id=?
2025-02-08 10:06:47.323 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [11]
2025-02-08 10:06:47.324 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select user0_.id as id1_1_0_, user0_.name as name2_1_0_ from user user0_ where user0_.id=?
2025-02-08 10:06:47.324 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [3]
2025-02-08 10:06:47.325 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.user_id=?
2025-02-08 10:06:47.325 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [3]
2025-02-08 10:06:47.326 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.327 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into trade (price, shares, symbol, timestamp, type, user_id, id) values (?, ?, ?, ?, ?, ?, ?)
2025-02-08 10:06:47.327 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [NUMERIC] - [154.77]
2025-02-08 10:06:47.328 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [INTEGER] - [30]
2025-02-08 10:06:47.328 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [ZAYO]
2025-02-08 10:06:47.328 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [TIMESTAMP] - [2016-12-31 09:59:16.0]
2025-02-08 10:06:47.328 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [5] as [VARCHAR] - [buy]
2025-02-08 10:06:47.328 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [6] as [BIGINT] - [3]
2025-02-08 10:06:47.329 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [7] as [BIGINT] - [14]
2025-02-08 10:06:47.340 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.id=?
2025-02-08 10:06:47.340 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [12]
2025-02-08 10:06:47.342 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.user_id=?
2025-02-08 10:06:47.342 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [11]
2025-02-08 10:06:47.343 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select user0_.id as id1_1_0_, user0_.name as name2_1_0_ from user user0_ where user0_.id=?
2025-02-08 10:06:47.344 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [2]
2025-02-08 10:06:47.344 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.345 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into user (name, id) values (?, ?)
2025-02-08 10:06:47.348 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [Daniel Cortez]
2025-02-08 10:06:47.349 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [BIGINT] - [15]
2025-02-08 10:06:47.350 DEBUG 4601 --- [           main] org.hibernate.SQL                        : update trade set price=?, shares=?, symbol=?, timestamp=?, type=?, user_id=? where id=?
2025-02-08 10:06:47.350 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [NUMERIC] - [172.35]
2025-02-08 10:06:47.350 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [INTEGER] - [18]
2025-02-08 10:06:47.350 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [WEX]
2025-02-08 10:06:47.351 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [TIMESTAMP] - [2016-12-31 12:01:56.0]
2025-02-08 10:06:47.351 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [5] as [VARCHAR] - [buy]
2025-02-08 10:06:47.351 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [6] as [BIGINT] - [15]
2025-02-08 10:06:47.351 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [7] as [BIGINT] - [12]
2025-02-08 10:06:47.357 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.id=?
2025-02-08 10:06:47.358 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [13]
2025-02-08 10:06:47.359 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.user_id=?
2025-02-08 10:06:47.359 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]
2025-02-08 10:06:47.370  INFO 4601 --- [           main] o.h.e.internal.DefaultLoadEventListener  : HHH000327: Error performing load command : org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade

org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade
	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:90) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.entity.EntityLoader.loadByUniqueKey(EntityLoader.java:144) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.persister.entity.AbstractEntityPersister.loadByUniqueKey(AbstractEntityPersister.java:2351) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.type.EntityType.loadByUniqueKey(EntityType.java:739) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.type.EntityType.resolve(EntityType.java:467) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:1151) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.processResultSet(Loader.java:1010) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.doQuery(Loader.java:948) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:340) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:310) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.loadEntity(Loader.java:2281) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:64) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:54) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:4269) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:511) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:481) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:222) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:281) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.doOnLoad(DefaultLoadEventListener.java:124) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:92) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.internal.SessionImpl.fireLoad(SessionImpl.java:1257) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.internal.SessionImpl.access$1900(SessionImpl.java:207) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.doLoad(SessionImpl.java:2874) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.load(SessionImpl.java:2848) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.internal.SessionImpl.get(SessionImpl.java:1098) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultMergeEventListener.entityIsDetached(DefaultMergeEventListener.java:290) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:170) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:69) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.internal.SessionImpl.fireMerge(SessionImpl.java:901) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.internal.SessionImpl.merge(SessionImpl.java:887) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at jdk.internal.reflect.GeneratedMethodAccessor53.invoke(Unknown Source) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:350) ~[spring-orm-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at jdk.proxy2/jdk.proxy2.$Proxy103.merge(Unknown Source) ~[na:na]
	at jdk.internal.reflect.GeneratedMethodAccessor53.invoke(Unknown Source) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:308) ~[spring-orm-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at jdk.proxy2/jdk.proxy2.$Proxy103.merge(Unknown Source) ~[na:na]
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:492) ~[spring-data-jpa-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294) ~[spring-tx-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98) ~[spring-tx-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) ~[spring-tx-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135) ~[spring-data-jpa-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at jdk.proxy2/jdk.proxy2.$Proxy105.save(Unknown Source) ~[na:na]
	at com.hackerrank.stocktrade.service.TradeService.addTrade(TradeService.java:22) ~[classes/:na]
	at com.hackerrank.stocktrade.controller.TradesController.addTrade(TradesController.java:26) ~[classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) ~[tomcat-embed-core-9.0.13.jar:9.0.13]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:71) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.13.jar:9.0.13]
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:166) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:182) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at com.hackerrank.stocktrade.requests.TradesControllerTest.createTrade(TradesControllerTest.java:406) ~[test-classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55) ~[junit-4.12.jar:4.12]
	at org.junit.rules.RunRules.evaluate(RunRules.java:20) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) ~[junit-4.12.jar:4.12]
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.junit.rules.RunRules.evaluate(RunRules.java:20) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runners.Suite.runChild(Suite.java:128) ~[junit-4.12.jar:4.12]
	at org.junit.runners.Suite.runChild(Suite.java:27) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316) ~[surefire-junit4-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240) ~[surefire-junit4-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214) ~[surefire-junit4-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155) ~[surefire-junit4-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385) ~[surefire-booter-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162) ~[surefire-booter-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507) ~[surefire-booter-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495) ~[surefire-booter-3.2.5.jar:3.2.5]


MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 2, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "A", "shares": 19, "price": 153.57, "timestamp": "2016-12-28 13:15:52"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"A","shares":19,"price":153.57,"timestamp":"2016-12-28T18:15:52.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 3, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "A", "shares": 12, "price": 135.89, "timestamp": "2016-12-28 13:18:18"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":3,"name":"Derrick Garcia","trade":null},"symbol":"A","shares":12,"price":135.89,"timestamp":"2016-12-28T18:18:18.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 4, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 15, "price": 183.45, "timestamp": "2016-12-28 15:15:50"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":5,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":15,"price":183.45,"timestamp":"2016-12-28T20:15:50.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 5, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 10, "price": 190.73, "timestamp": "2016-12-29 09:05:23"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":6,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":10,"price":190.73,"timestamp":"2016-12-29T14:05:23.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 6, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 30, "price": 137.86, "timestamp": "2016-12-30 11:42:40"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":8,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":30,"price":137.86,"timestamp":"2016-12-30T16:42:40.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 7, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 19, "price": 183.45, "timestamp": "2016-12-30 12:35:21"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":10,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":19,"price":183.45,"timestamp":"2016-12-30T17:35:21.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 8, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "WEX", "shares": 11, "price": 172.35, "timestamp": "2016-12-30 13:07:19"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":11,"name":"Derrick Garcia","trade":null},"symbol":"WEX","shares":11,"price":172.35,"timestamp":"2016-12-30T18:07:19.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 9, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 25, "price": 154.77, "timestamp": "2016-12-30 13:36:20"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":25,"price":154.77,"timestamp":"2016-12-30T18:36:20.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 10, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "MMS", "shares": 28, "price": 152.93, "timestamp": "2016-12-30 14:48:14"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":13,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"MMS","shares":28,"price":152.93,"timestamp":"2016-12-30T19:48:14.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 11, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 30, "price": 154.77, "timestamp": "2016-12-31 09:59:16"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":14,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":30,"price":154.77,"timestamp":"2016-12-31T14:59:16.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 12, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 18, "price": 172.35, "timestamp": "2016-12-31 12:01:56"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":15,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":18,"price":172.35,"timestamp":"2016-12-31T17:01:56.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

&amp#27;[0;31mcreateTrade(com.hackerrank.stocktrade.requests.TradesControllerTest)&amp#27;[0m
&amp#27;[0;31morg.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1013)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)&amp#27;[0m
&amp#27;[0;31m	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:71)&amp#27;[0m
&amp#27;[0;31m	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:166)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:182)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.requests.TradesControllerTest.createTrade(TradesControllerTest.java:406)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:128)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)&amp#27;[0m
&amp#27;[0;31mCaused by: org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade&amp#27;[0m
&amp#27;[0;31m	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:351)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:253)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:153)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)&amp#27;[0m
&amp#27;[0;31m	at jdk.proxy2/jdk.proxy2.$Proxy105.save(Unknown Source)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.service.TradeService.addTrade(TradeService.java:22)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.controller.TradesController.addTrade(TradesController.java:26)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)&amp#27;[0m
&amp#27;[0;31m	... 70 more&amp#27;[0m
&amp#27;[0;31mCaused by: org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:90)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.entity.EntityLoader.loadByUniqueKey(EntityLoader.java:144)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.persister.entity.AbstractEntityPersister.loadByUniqueKey(AbstractEntityPersister.java:2351)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.type.EntityType.loadByUniqueKey(EntityType.java:739)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.type.EntityType.resolve(EntityType.java:467)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:1151)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.processResultSet(Loader.java:1010)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.doQuery(Loader.java:948)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:340)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:310)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.loadEntity(Loader.java:2281)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:64)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:54)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:4269)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:511)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:481)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:222)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:281)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.doOnLoad(DefaultLoadEventListener.java:124)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:92)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.internal.SessionImpl.fireLoad(SessionImpl.java:1257)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.internal.SessionImpl.access$1900(SessionImpl.java:207)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.doLoad(SessionImpl.java:2874)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.load(SessionImpl.java:2848)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.internal.SessionImpl.get(SessionImpl.java:1098)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultMergeEventListener.entityIsDetached(DefaultMergeEventListener.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:170)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:69)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.internal.SessionImpl.fireMerge(SessionImpl.java:901)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.internal.SessionImpl.merge(SessionImpl.java:887)&amp#27;[0m
&amp#27;[0;31m	at jdk.internal.reflect.GeneratedMethodAccessor53.invoke(Unknown Source)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:350)&amp#27;[0m
&amp#27;[0;31m	at jdk.proxy2/jdk.proxy2.$Proxy103.merge(Unknown Source)&amp#27;[0m
&amp#27;[0;31m	at jdk.internal.reflect.GeneratedMethodAccessor53.invoke(Unknown Source)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:308)&amp#27;[0m
&amp#27;[0;31m	at jdk.proxy2/jdk.proxy2.$Proxy103.merge(Unknown Source)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:492)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)&amp#27;[0m
&amp#27;[0;31m	... 94 more&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="createTradeWithExistingId" classname="com.hackerrank.stocktrade.requests.TradesControllerTest" time="0.138">
    <failure message="Status expected:&lt;400&gt; but was:&lt;201&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<400> but was:<201>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:55)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:82)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:619)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:195)
	at com.hackerrank.stocktrade.requests.TradesControllerTest.createTradeWithExistingId(TradesControllerTest.java:583)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]></failure>
    <system-out><![CDATA[2025-02-08 10:06:47.431 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.id=?
2025-02-08 10:06:47.434 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]
2025-02-08 10:06:47.435 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select user0_.id as id1_1_0_, user0_.name as name2_1_0_ from user user0_ where user0_.id=?
2025-02-08 10:06:47.436 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [4]
2025-02-08 10:06:47.436 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.437 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.439 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into user (name, id) values (?, ?)
2025-02-08 10:06:47.439 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [Derrick Garcia]
2025-02-08 10:06:47.439 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [BIGINT] - [16]
2025-02-08 10:06:47.439 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into trade (price, shares, symbol, timestamp, type, user_id, id) values (?, ?, ?, ?, ?, ?, ?)
2025-02-08 10:06:47.440 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [NUMERIC] - [154.77]
2025-02-08 10:06:47.440 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [INTEGER] - [11]
2025-02-08 10:06:47.440 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [ZAYO]
2025-02-08 10:06:47.440 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [TIMESTAMP] - [2016-12-28 11:44:37.0]
2025-02-08 10:06:47.440 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [5] as [VARCHAR] - [buy]
2025-02-08 10:06:47.440 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [6] as [BIGINT] - [16]
2025-02-08 10:06:47.440 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [7] as [BIGINT] - [17]

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 2, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "A", "shares": 19, "price": 153.57, "timestamp": "2016-12-28 13:15:52"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"A","shares":19,"price":153.57,"timestamp":"2016-12-28T18:15:52.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 3, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "A", "shares": 12, "price": 135.89, "timestamp": "2016-12-28 13:18:18"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":3,"name":"Derrick Garcia","trade":null},"symbol":"A","shares":12,"price":135.89,"timestamp":"2016-12-28T18:18:18.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 4, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 15, "price": 183.45, "timestamp": "2016-12-28 15:15:50"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":5,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":15,"price":183.45,"timestamp":"2016-12-28T20:15:50.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 5, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 10, "price": 190.73, "timestamp": "2016-12-29 09:05:23"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":6,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":10,"price":190.73,"timestamp":"2016-12-29T14:05:23.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 6, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 30, "price": 137.86, "timestamp": "2016-12-30 11:42:40"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":8,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":30,"price":137.86,"timestamp":"2016-12-30T16:42:40.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 7, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 19, "price": 183.45, "timestamp": "2016-12-30 12:35:21"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":10,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":19,"price":183.45,"timestamp":"2016-12-30T17:35:21.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 8, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "WEX", "shares": 11, "price": 172.35, "timestamp": "2016-12-30 13:07:19"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":11,"name":"Derrick Garcia","trade":null},"symbol":"WEX","shares":11,"price":172.35,"timestamp":"2016-12-30T18:07:19.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 9, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 25, "price": 154.77, "timestamp": "2016-12-30 13:36:20"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":25,"price":154.77,"timestamp":"2016-12-30T18:36:20.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 10, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "MMS", "shares": 28, "price": 152.93, "timestamp": "2016-12-30 14:48:14"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":13,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"MMS","shares":28,"price":152.93,"timestamp":"2016-12-30T19:48:14.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 11, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 30, "price": 154.77, "timestamp": "2016-12-31 09:59:16"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":14,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":30,"price":154.77,"timestamp":"2016-12-31T14:59:16.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 12, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 18, "price": 172.35, "timestamp": "2016-12-31 12:01:56"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":15,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":18,"price":172.35,"timestamp":"2016-12-31T17:01:56.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":17,"type":"buy","user":{"id":16,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

&amp#27;[0;31mcreateTradeWithExistingId(com.hackerrank.stocktrade.requests.TradesControllerTest)&amp#27;[0m
&amp#27;[0;31mjava.lang.AssertionError: Status expected:<400> but was:<201>&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:55)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:82)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:619)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:195)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.requests.TradesControllerTest.createTradeWithExistingId(TradesControllerTest.java:583)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:128)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="findTradeById" classname="com.hackerrank.stocktrade.requests.TradesControllerTest" time="0.105">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<200> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:55)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:82)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:619)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:195)
	at com.hackerrank.stocktrade.requests.TradesControllerTest.findTradeById(TradesControllerTest.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]></failure>
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 2, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "A", "shares": 19, "price": 153.57, "timestamp": "2016-12-28 13:15:52"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"A","shares":19,"price":153.57,"timestamp":"2016-12-28T18:15:52.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 3, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "A", "shares": 12, "price": 135.89, "timestamp": "2016-12-28 13:18:18"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":3,"name":"Derrick Garcia","trade":null},"symbol":"A","shares":12,"price":135.89,"timestamp":"2016-12-28T18:18:18.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 4, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 15, "price": 183.45, "timestamp": "2016-12-28 15:15:50"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":5,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":15,"price":183.45,"timestamp":"2016-12-28T20:15:50.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 5, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 10, "price": 190.73, "timestamp": "2016-12-29 09:05:23"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":6,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":10,"price":190.73,"timestamp":"2016-12-29T14:05:23.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 6, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 30, "price": 137.86, "timestamp": "2016-12-30 11:42:40"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":8,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":30,"price":137.86,"timestamp":"2016-12-30T16:42:40.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 7, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 19, "price": 183.45, "timestamp": "2016-12-30 12:35:21"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":10,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":19,"price":183.45,"timestamp":"2016-12-30T17:35:21.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 8, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "WEX", "shares": 11, "price": 172.35, "timestamp": "2016-12-30 13:07:19"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":11,"name":"Derrick Garcia","trade":null},"symbol":"WEX","shares":11,"price":172.35,"timestamp":"2016-12-30T18:07:19.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 9, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 25, "price": 154.77, "timestamp": "2016-12-30 13:36:20"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":25,"price":154.77,"timestamp":"2016-12-30T18:36:20.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 10, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "MMS", "shares": 28, "price": 152.93, "timestamp": "2016-12-30 14:48:14"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":13,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"MMS","shares":28,"price":152.93,"timestamp":"2016-12-30T19:48:14.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 11, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 30, "price": 154.77, "timestamp": "2016-12-31 09:59:16"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":14,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":30,"price":154.77,"timestamp":"2016-12-31T14:59:16.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 12, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 18, "price": 172.35, "timestamp": "2016-12-31 12:01:56"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":15,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":18,"price":172.35,"timestamp":"2016-12-31T17:01:56.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":17,"type":"buy","user":{"id":16,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

&amp#27;[0;31mfindTradeById(com.hackerrank.stocktrade.requests.TradesControllerTest)&amp#27;[0m
&amp#27;[0;31mjava.lang.AssertionError: Status expected:<200> but was:<404>&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:55)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:82)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:619)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:195)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.requests.TradesControllerTest.findTradeById(TradesControllerTest.java:618)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:128)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="findTradeByNonExistingId" classname="com.hackerrank.stocktrade.requests.TradesControllerTest" time="0.001"/>
  <testcase name="findAllTradesByUserId" classname="com.hackerrank.stocktrade.requests.TradesControllerTest" time="0.111">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<200> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:55)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:82)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:619)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:195)
	at com.hackerrank.stocktrade.requests.TradesControllerTest.findAllTradesByUserId(TradesControllerTest.java:749)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]></failure>
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 2, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "A", "shares": 19, "price": 153.57, "timestamp": "2016-12-28 13:15:52"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"A","shares":19,"price":153.57,"timestamp":"2016-12-28T18:15:52.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 3, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "A", "shares": 12, "price": 135.89, "timestamp": "2016-12-28 13:18:18"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":3,"name":"Derrick Garcia","trade":null},"symbol":"A","shares":12,"price":135.89,"timestamp":"2016-12-28T18:18:18.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 4, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 15, "price": 183.45, "timestamp": "2016-12-28 15:15:50"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":5,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":15,"price":183.45,"timestamp":"2016-12-28T20:15:50.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 5, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 10, "price": 190.73, "timestamp": "2016-12-29 09:05:23"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":6,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":10,"price":190.73,"timestamp":"2016-12-29T14:05:23.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 6, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 30, "price": 137.86, "timestamp": "2016-12-30 11:42:40"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":8,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":30,"price":137.86,"timestamp":"2016-12-30T16:42:40.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 7, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 19, "price": 183.45, "timestamp": "2016-12-30 12:35:21"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":10,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":19,"price":183.45,"timestamp":"2016-12-30T17:35:21.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 8, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "WEX", "shares": 11, "price": 172.35, "timestamp": "2016-12-30 13:07:19"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":11,"name":"Derrick Garcia","trade":null},"symbol":"WEX","shares":11,"price":172.35,"timestamp":"2016-12-30T18:07:19.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 9, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 25, "price": 154.77, "timestamp": "2016-12-30 13:36:20"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":25,"price":154.77,"timestamp":"2016-12-30T18:36:20.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 10, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "MMS", "shares": 28, "price": 152.93, "timestamp": "2016-12-30 14:48:14"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":13,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"MMS","shares":28,"price":152.93,"timestamp":"2016-12-30T19:48:14.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 11, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 30, "price": 154.77, "timestamp": "2016-12-31 09:59:16"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":14,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":30,"price":154.77,"timestamp":"2016-12-31T14:59:16.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 12, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 18, "price": 172.35, "timestamp": "2016-12-31 12:01:56"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":15,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":18,"price":172.35,"timestamp":"2016-12-31T17:01:56.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":17,"type":"buy","user":{"id":16,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/19
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/users/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

&amp#27;[0;31mfindAllTradesByUserId(com.hackerrank.stocktrade.requests.TradesControllerTest)&amp#27;[0m
&amp#27;[0;31mjava.lang.AssertionError: Status expected:<200> but was:<404>&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:55)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:82)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:619)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:195)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.requests.TradesControllerTest.findAllTradesByUserId(TradesControllerTest.java:749)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:128)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="findAllTradesByNonExistingUserId" classname="com.hackerrank.stocktrade.requests.TradesControllerTest" time="0.0"/>
  <testcase name="findAllTradesByStockSymbolAndTradeTypeInDateRange" classname="com.hackerrank.stocktrade.requests.TradesControllerTest" time="0.121">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<200> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:55)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:82)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:619)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:195)
	at com.hackerrank.stocktrade.requests.TradesControllerTest.findAllTradesByStockSymbolAndTradeTypeInDateRange(TradesControllerTest.java:808)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]></failure>
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 2, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "A", "shares": 19, "price": 153.57, "timestamp": "2016-12-28 13:15:52"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"A","shares":19,"price":153.57,"timestamp":"2016-12-28T18:15:52.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 3, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "A", "shares": 12, "price": 135.89, "timestamp": "2016-12-28 13:18:18"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":3,"name":"Derrick Garcia","trade":null},"symbol":"A","shares":12,"price":135.89,"timestamp":"2016-12-28T18:18:18.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 4, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 15, "price": 183.45, "timestamp": "2016-12-28 15:15:50"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":5,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":15,"price":183.45,"timestamp":"2016-12-28T20:15:50.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 5, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 10, "price": 190.73, "timestamp": "2016-12-29 09:05:23"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":6,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":10,"price":190.73,"timestamp":"2016-12-29T14:05:23.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 6, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 30, "price": 137.86, "timestamp": "2016-12-30 11:42:40"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":8,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":30,"price":137.86,"timestamp":"2016-12-30T16:42:40.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 7, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 19, "price": 183.45, "timestamp": "2016-12-30 12:35:21"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":10,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":19,"price":183.45,"timestamp":"2016-12-30T17:35:21.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 8, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "WEX", "shares": 11, "price": 172.35, "timestamp": "2016-12-30 13:07:19"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":11,"name":"Derrick Garcia","trade":null},"symbol":"WEX","shares":11,"price":172.35,"timestamp":"2016-12-30T18:07:19.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 9, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 25, "price": 154.77, "timestamp": "2016-12-30 13:36:20"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":25,"price":154.77,"timestamp":"2016-12-30T18:36:20.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 10, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "MMS", "shares": 28, "price": 152.93, "timestamp": "2016-12-30 14:48:14"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":13,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"MMS","shares":28,"price":152.93,"timestamp":"2016-12-30T19:48:14.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 11, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 30, "price": 154.77, "timestamp": "2016-12-31 09:59:16"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":14,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":30,"price":154.77,"timestamp":"2016-12-31T14:59:16.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 12, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 18, "price": 172.35, "timestamp": "2016-12-31 12:01:56"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":15,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":18,"price":172.35,"timestamp":"2016-12-31T17:01:56.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":17,"type":"buy","user":{"id":16,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/19
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/users/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/users/5
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/stocks/A
       Parameters = {type=[sell], start=[2016-12-28], end=[2017-01-03]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

&amp#27;[0;31mfindAllTradesByStockSymbolAndTradeTypeInDateRange(com.hackerrank.stocktrade.requests.TradesControllerTest)&amp#27;[0m
&amp#27;[0;31mjava.lang.AssertionError: Status expected:<200> but was:<404>&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:55)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:82)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:619)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:195)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.requests.TradesControllerTest.findAllTradesByStockSymbolAndTradeTypeInDateRange(TradesControllerTest.java:808)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:128)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="findAllTradesByNonExistingStockSymbolAndTradeTypeInDateRange" classname="com.hackerrank.stocktrade.requests.TradesControllerTest" time="0.0"/>
  <testcase name="findAllTrades" classname="com.hackerrank.stocktrade.requests.TradesControllerTest" time="0.215">
    <error message="Request processing failed; nested exception is org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade" type="org.springframework.web.util.NestedServletException"><![CDATA[org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1013)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:71)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:166)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:182)
	at com.hackerrank.stocktrade.requests.TradesControllerTest.findAllTrades(TradesControllerTest.java:1201)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
Caused by: org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:351)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:253)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:153)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy2/jdk.proxy2.$Proxy105.findAll(Unknown Source)
	at com.hackerrank.stocktrade.service.TradeService.findAllTrades(TradeService.java:27)
	at com.hackerrank.stocktrade.controller.TradesController.getTrades(TradesController.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	... 70 more
Caused by: org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade
	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:90)
	at org.hibernate.loader.entity.EntityLoader.loadByUniqueKey(EntityLoader.java:144)
	at org.hibernate.persister.entity.AbstractEntityPersister.loadByUniqueKey(AbstractEntityPersister.java:2351)
	at org.hibernate.type.EntityType.loadByUniqueKey(EntityType.java:739)
	at org.hibernate.type.EntityType.resolve(EntityType.java:467)
	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172)
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129)
	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.performTwoPhaseLoad(AbstractRowReader.java:238)
	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.finishUp(AbstractRowReader.java:209)
	at org.hibernate.loader.plan.exec.process.internal.ResultSetProcessorImpl.extractResults(ResultSetProcessorImpl.java:133)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:122)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:86)
	at org.hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader.load(AbstractLoadPlanBasedEntityLoader.java:188)
	at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:4269)
	at org.hibernate.event.internal.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:511)
	at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:481)
	at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:222)
	at org.hibernate.event.internal.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:281)
	at org.hibernate.event.internal.DefaultLoadEventListener.doOnLoad(DefaultLoadEventListener.java:124)
	at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:92)
	at org.hibernate.internal.SessionImpl.fireLoad(SessionImpl.java:1257)
	at org.hibernate.internal.SessionImpl.internalLoad(SessionImpl.java:1140)
	at org.hibernate.type.EntityType.resolveIdentifier(EntityType.java:682)
	at org.hibernate.type.EntityType.resolve(EntityType.java:464)
	at org.hibernate.type.ManyToOneType.resolve(ManyToOneType.java:239)
	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172)
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129)
	at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:1151)
	at org.hibernate.loader.Loader.processResultSet(Loader.java:1010)
	at org.hibernate.loader.Loader.doQuery(Loader.java:948)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:340)
	at org.hibernate.loader.Loader.doList(Loader.java:2689)
	at org.hibernate.loader.Loader.doList(Loader.java:2672)
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2506)
	at org.hibernate.loader.Loader.list(Loader.java:2501)
	at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:504)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:395)
	at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:220)
	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1508)
	at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1537)
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1505)
	at org.hibernate.query.Query.getResultList(Query.java:135)
	at org.hibernate.query.criteria.internal.compile.CriteriaQueryTypeQueryAdapter.getResultList(CriteriaQueryTypeQueryAdapter.java:74)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:306)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:73)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	... 94 more
]]></error>
    <system-out><![CDATA[2025-02-08 10:06:47.589  INFO 4601 --- [           main] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2025-02-08 10:06:47.707 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_, trade0_.price as price2_0_, trade0_.shares as shares3_0_, trade0_.symbol as symbol4_0_, trade0_.timestamp as timestam5_0_, trade0_.type as type6_0_, trade0_.user_id as user_id7_0_ from trade trade0_
2025-02-08 10:06:47.710 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select user0_.id as id1_1_0_, user0_.name as name2_1_0_, trade1_.id as id1_0_1_, trade1_.price as price2_0_1_, trade1_.shares as shares3_0_1_, trade1_.symbol as symbol4_0_1_, trade1_.timestamp as timestam5_0_1_, trade1_.type as type6_0_1_, trade1_.user_id as user_id7_0_1_ from user user0_ left outer join trade trade1_ on user0_.id=trade1_.user_id where user0_.id=?
2025-02-08 10:06:47.713 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]
2025-02-08 10:06:47.718 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.user_id=?
2025-02-08 10:06:47.719 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]
2025-02-08 10:06:47.722  INFO 4601 --- [           main] o.h.e.internal.DefaultLoadEventListener  : HHH000327: Error performing load command : org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade

org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade
	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:90) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.entity.EntityLoader.loadByUniqueKey(EntityLoader.java:144) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.persister.entity.AbstractEntityPersister.loadByUniqueKey(AbstractEntityPersister.java:2351) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.type.EntityType.loadByUniqueKey(EntityType.java:739) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.type.EntityType.resolve(EntityType.java:467) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.performTwoPhaseLoad(AbstractRowReader.java:238) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.finishUp(AbstractRowReader.java:209) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.plan.exec.process.internal.ResultSetProcessorImpl.extractResults(ResultSetProcessorImpl.java:133) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:122) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:86) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader.load(AbstractLoadPlanBasedEntityLoader.java:188) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:4269) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:511) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:481) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:222) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:281) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.doOnLoad(DefaultLoadEventListener.java:124) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:92) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.internal.SessionImpl.fireLoad(SessionImpl.java:1257) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.internal.SessionImpl.internalLoad(SessionImpl.java:1140) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.type.EntityType.resolveIdentifier(EntityType.java:682) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.type.EntityType.resolve(EntityType.java:464) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.type.ManyToOneType.resolve(ManyToOneType.java:239) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:1151) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.processResultSet(Loader.java:1010) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.doQuery(Loader.java:948) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:340) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.doList(Loader.java:2689) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.doList(Loader.java:2672) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2506) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.list(Loader.java:2501) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:504) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:395) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:220) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1508) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1537) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1505) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.query.Query.getResultList(Query.java:135) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.query.criteria.internal.compile.CriteriaQueryTypeQueryAdapter.getResultList(CriteriaQueryTypeQueryAdapter.java:74) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:306) ~[spring-data-jpa-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:73) ~[spring-data-jpa-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294) ~[spring-tx-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98) ~[spring-tx-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) ~[spring-tx-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135) ~[spring-data-jpa-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at jdk.proxy2/jdk.proxy2.$Proxy105.findAll(Unknown Source) ~[na:na]
	at com.hackerrank.stocktrade.service.TradeService.findAllTrades(TradeService.java:27) ~[classes/:na]
	at com.hackerrank.stocktrade.controller.TradesController.getTrades(TradesController.java:32) ~[classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.13.jar:9.0.13]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:71) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.13.jar:9.0.13]
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:166) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:182) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at com.hackerrank.stocktrade.requests.TradesControllerTest.findAllTrades(TradesControllerTest.java:1201) ~[test-classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55) ~[junit-4.12.jar:4.12]
	at org.junit.rules.RunRules.evaluate(RunRules.java:20) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) ~[junit-4.12.jar:4.12]
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.junit.rules.RunRules.evaluate(RunRules.java:20) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runners.Suite.runChild(Suite.java:128) ~[junit-4.12.jar:4.12]
	at org.junit.runners.Suite.runChild(Suite.java:27) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316) ~[surefire-junit4-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240) ~[surefire-junit4-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214) ~[surefire-junit4-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155) ~[surefire-junit4-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385) ~[surefire-booter-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162) ~[surefire-booter-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507) ~[surefire-booter-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495) ~[surefire-booter-3.2.5.jar:3.2.5]


MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 2, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "A", "shares": 19, "price": 153.57, "timestamp": "2016-12-28 13:15:52"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"A","shares":19,"price":153.57,"timestamp":"2016-12-28T18:15:52.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 3, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "A", "shares": 12, "price": 135.89, "timestamp": "2016-12-28 13:18:18"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":3,"name":"Derrick Garcia","trade":null},"symbol":"A","shares":12,"price":135.89,"timestamp":"2016-12-28T18:18:18.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 4, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 15, "price": 183.45, "timestamp": "2016-12-28 15:15:50"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":5,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":15,"price":183.45,"timestamp":"2016-12-28T20:15:50.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 5, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 10, "price": 190.73, "timestamp": "2016-12-29 09:05:23"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":6,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":10,"price":190.73,"timestamp":"2016-12-29T14:05:23.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 6, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 30, "price": 137.86, "timestamp": "2016-12-30 11:42:40"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":8,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":30,"price":137.86,"timestamp":"2016-12-30T16:42:40.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 7, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 19, "price": 183.45, "timestamp": "2016-12-30 12:35:21"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":10,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":19,"price":183.45,"timestamp":"2016-12-30T17:35:21.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 8, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "WEX", "shares": 11, "price": 172.35, "timestamp": "2016-12-30 13:07:19"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":11,"name":"Derrick Garcia","trade":null},"symbol":"WEX","shares":11,"price":172.35,"timestamp":"2016-12-30T18:07:19.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 9, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 25, "price": 154.77, "timestamp": "2016-12-30 13:36:20"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":25,"price":154.77,"timestamp":"2016-12-30T18:36:20.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 10, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "MMS", "shares": 28, "price": 152.93, "timestamp": "2016-12-30 14:48:14"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":13,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"MMS","shares":28,"price":152.93,"timestamp":"2016-12-30T19:48:14.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 11, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 30, "price": 154.77, "timestamp": "2016-12-31 09:59:16"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":14,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":30,"price":154.77,"timestamp":"2016-12-31T14:59:16.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 12, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 18, "price": 172.35, "timestamp": "2016-12-31 12:01:56"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":15,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":18,"price":172.35,"timestamp":"2016-12-31T17:01:56.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":17,"type":"buy","user":{"id":16,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/19
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/users/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/users/5
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/stocks/A
       Parameters = {type=[sell], start=[2016-12-28], end=[2017-01-03]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/stocks/AB
       Parameters = {type=[buy], start=[2016-12-28], end=[2016-12-29]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

&amp#27;[0;31mfindAllTrades(com.hackerrank.stocktrade.requests.TradesControllerTest)&amp#27;[0m
&amp#27;[0;31morg.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1013)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)&amp#27;[0m
&amp#27;[0;31m	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:71)&amp#27;[0m
&amp#27;[0;31m	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:166)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:182)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.requests.TradesControllerTest.findAllTrades(TradesControllerTest.java:1201)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:128)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)&amp#27;[0m
&amp#27;[0;31mCaused by: org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade&amp#27;[0m
&amp#27;[0;31m	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:351)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:253)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:153)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)&amp#27;[0m
&amp#27;[0;31m	at jdk.proxy2/jdk.proxy2.$Proxy105.findAll(Unknown Source)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.service.TradeService.findAllTrades(TradeService.java:27)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.controller.TradesController.getTrades(TradesController.java:32)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)&amp#27;[0m
&amp#27;[0;31m	... 70 more&amp#27;[0m
&amp#27;[0;31mCaused by: org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:90)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.entity.EntityLoader.loadByUniqueKey(EntityLoader.java:144)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.persister.entity.AbstractEntityPersister.loadByUniqueKey(AbstractEntityPersister.java:2351)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.type.EntityType.loadByUniqueKey(EntityType.java:739)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.type.EntityType.resolve(EntityType.java:467)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.performTwoPhaseLoad(AbstractRowReader.java:238)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.finishUp(AbstractRowReader.java:209)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.plan.exec.process.internal.ResultSetProcessorImpl.extractResults(ResultSetProcessorImpl.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:122)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:86)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader.load(AbstractLoadPlanBasedEntityLoader.java:188)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:4269)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:511)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:481)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:222)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:281)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.doOnLoad(DefaultLoadEventListener.java:124)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:92)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.internal.SessionImpl.fireLoad(SessionImpl.java:1257)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.internal.SessionImpl.internalLoad(SessionImpl.java:1140)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.type.EntityType.resolveIdentifier(EntityType.java:682)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.type.EntityType.resolve(EntityType.java:464)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.type.ManyToOneType.resolve(ManyToOneType.java:239)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:1151)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.processResultSet(Loader.java:1010)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.doQuery(Loader.java:948)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:340)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.doList(Loader.java:2689)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.doList(Loader.java:2672)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2506)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.list(Loader.java:2501)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:504)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:395)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:220)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1508)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1537)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1505)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.query.Query.getResultList(Query.java:135)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.query.criteria.internal.compile.CriteriaQueryTypeQueryAdapter.getResultList(CriteriaQueryTypeQueryAdapter.java:74)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:306)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:73)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)&amp#27;[0m
&amp#27;[0;31m	... 94 more&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="findHighestAndLowestPriceByStockSymbolInDateRange" classname="com.hackerrank.stocktrade.requests.StocksControllerTest" time="0.099">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<200> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:55)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:82)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:619)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:195)
	at com.hackerrank.stocktrade.requests.StocksControllerTest.findHighestAndLowestPriceByStockSymbolInDateRange(StocksControllerTest.java:76)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]></failure>
    <system-out><![CDATA[2025-02-08 10:06:47.802  INFO 4601 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.hackerrank.stocktrade.requests.StocksControllerTest], using SpringBootContextLoader
2025-02-08 10:06:47.803  INFO 4601 --- [           main] o.s.t.c.support.AbstractContextLoader    : Could not detect default resource locations for test class [com.hackerrank.stocktrade.requests.StocksControllerTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2025-02-08 10:06:47.803  INFO 4601 --- [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.hackerrank.stocktrade.requests.StocksControllerTest]: StocksControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-02-08 10:06:47.806  INFO 4601 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.hackerrank.stocktrade.Application for test class com.hackerrank.stocktrade.requests.StocksControllerTest
2025-02-08 10:06:47.808  INFO 4601 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener]
2025-02-08 10:06:47.808  INFO 4601 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@630febd7, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@45c2c396, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@408d12fc, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@69d61a6f, org.springframework.test.context.support.DirtiesContextTestExecutionListener@759b05d1, org.springframework.test.context.transaction.TransactionalTestExecutionListener@2696b687, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@ea45a5b, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@57f83c82, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@7a600e21, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@69d1ad64, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@458b4487, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@53016c98]

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 2, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "A", "shares": 19, "price": 153.57, "timestamp": "2016-12-28 13:15:52"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"A","shares":19,"price":153.57,"timestamp":"2016-12-28T18:15:52.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 3, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "A", "shares": 12, "price": 135.89, "timestamp": "2016-12-28 13:18:18"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":3,"name":"Derrick Garcia","trade":null},"symbol":"A","shares":12,"price":135.89,"timestamp":"2016-12-28T18:18:18.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 4, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 15, "price": 183.45, "timestamp": "2016-12-28 15:15:50"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":5,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":15,"price":183.45,"timestamp":"2016-12-28T20:15:50.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 5, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 10, "price": 190.73, "timestamp": "2016-12-29 09:05:23"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":6,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":10,"price":190.73,"timestamp":"2016-12-29T14:05:23.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 6, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 30, "price": 137.86, "timestamp": "2016-12-30 11:42:40"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":8,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":30,"price":137.86,"timestamp":"2016-12-30T16:42:40.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 7, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 19, "price": 183.45, "timestamp": "2016-12-30 12:35:21"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":10,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":19,"price":183.45,"timestamp":"2016-12-30T17:35:21.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 8, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "WEX", "shares": 11, "price": 172.35, "timestamp": "2016-12-30 13:07:19"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":11,"name":"Derrick Garcia","trade":null},"symbol":"WEX","shares":11,"price":172.35,"timestamp":"2016-12-30T18:07:19.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 9, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 25, "price": 154.77, "timestamp": "2016-12-30 13:36:20"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":25,"price":154.77,"timestamp":"2016-12-30T18:36:20.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 10, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "MMS", "shares": 28, "price": 152.93, "timestamp": "2016-12-30 14:48:14"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":13,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"MMS","shares":28,"price":152.93,"timestamp":"2016-12-30T19:48:14.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 11, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 30, "price": 154.77, "timestamp": "2016-12-31 09:59:16"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":14,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":30,"price":154.77,"timestamp":"2016-12-31T14:59:16.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 12, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 18, "price": 172.35, "timestamp": "2016-12-31 12:01:56"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":15,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":18,"price":172.35,"timestamp":"2016-12-31T17:01:56.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":17,"type":"buy","user":{"id":16,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/19
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/users/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/users/5
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/stocks/A
       Parameters = {type=[sell], start=[2016-12-28], end=[2017-01-03]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/stocks/AB
       Parameters = {type=[buy], start=[2016-12-28], end=[2016-12-29]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /stocks/A/price
       Parameters = {start=[2016-12-29], end=[2017-01-03]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

&amp#27;[0;31mfindHighestAndLowestPriceByStockSymbolInDateRange(com.hackerrank.stocktrade.requests.StocksControllerTest)&amp#27;[0m
&amp#27;[0;31mjava.lang.AssertionError: Status expected:<200> but was:<404>&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:55)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:82)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:619)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:195)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.requests.StocksControllerTest.findHighestAndLowestPriceByStockSymbolInDateRange(StocksControllerTest.java:76)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:128)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="findHighestAndLowestPriceByNonExistingStockSymbolInDateRange" classname="com.hackerrank.stocktrade.requests.StocksControllerTest" time="0.0"/>
  <testcase name="eraseAllRecords" classname="com.hackerrank.stocktrade.requests.ResourcesControllerTest" time="0.172">
    <error message="Request processing failed; nested exception is org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade" type="org.springframework.web.util.NestedServletException"><![CDATA[org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1013)
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:930)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:666)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:71)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:166)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:182)
	at com.hackerrank.stocktrade.requests.ResourcesControllerTest.eraseAllRecords(ResourcesControllerTest.java:57)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
Caused by: org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:351)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:253)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:153)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy2/jdk.proxy2.$Proxy105.findAll(Unknown Source)
	at com.hackerrank.stocktrade.service.ResourcesService.eraseAllTradesRecordsIncludingUserRecords(ResourcesService.java:23)
	at com.hackerrank.stocktrade.controller.ResourcesController.eraseAllTrades(ResourcesController.java:26)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	... 70 more
Caused by: org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade
	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:90)
	at org.hibernate.loader.entity.EntityLoader.loadByUniqueKey(EntityLoader.java:144)
	at org.hibernate.persister.entity.AbstractEntityPersister.loadByUniqueKey(AbstractEntityPersister.java:2351)
	at org.hibernate.type.EntityType.loadByUniqueKey(EntityType.java:739)
	at org.hibernate.type.EntityType.resolve(EntityType.java:467)
	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172)
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129)
	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.performTwoPhaseLoad(AbstractRowReader.java:238)
	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.finishUp(AbstractRowReader.java:209)
	at org.hibernate.loader.plan.exec.process.internal.ResultSetProcessorImpl.extractResults(ResultSetProcessorImpl.java:133)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:122)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:86)
	at org.hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader.load(AbstractLoadPlanBasedEntityLoader.java:188)
	at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:4269)
	at org.hibernate.event.internal.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:511)
	at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:481)
	at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:222)
	at org.hibernate.event.internal.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:281)
	at org.hibernate.event.internal.DefaultLoadEventListener.doOnLoad(DefaultLoadEventListener.java:124)
	at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:92)
	at org.hibernate.internal.SessionImpl.fireLoad(SessionImpl.java:1257)
	at org.hibernate.internal.SessionImpl.internalLoad(SessionImpl.java:1140)
	at org.hibernate.type.EntityType.resolveIdentifier(EntityType.java:682)
	at org.hibernate.type.EntityType.resolve(EntityType.java:464)
	at org.hibernate.type.ManyToOneType.resolve(ManyToOneType.java:239)
	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172)
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129)
	at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:1151)
	at org.hibernate.loader.Loader.processResultSet(Loader.java:1010)
	at org.hibernate.loader.Loader.doQuery(Loader.java:948)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:340)
	at org.hibernate.loader.Loader.doList(Loader.java:2689)
	at org.hibernate.loader.Loader.doList(Loader.java:2672)
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2506)
	at org.hibernate.loader.Loader.list(Loader.java:2501)
	at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:504)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:395)
	at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:220)
	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1508)
	at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1537)
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1505)
	at org.hibernate.query.Query.getResultList(Query.java:135)
	at org.hibernate.query.criteria.internal.compile.CriteriaQueryTypeQueryAdapter.getResultList(CriteriaQueryTypeQueryAdapter.java:74)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:306)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:73)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	... 94 more
]]></error>
    <system-out><![CDATA[2025-02-08 10:06:47.854  INFO 4601 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.hackerrank.stocktrade.requests.ResourcesControllerTest], using SpringBootContextLoader
2025-02-08 10:06:47.856  INFO 4601 --- [           main] o.s.t.c.support.AbstractContextLoader    : Could not detect default resource locations for test class [com.hackerrank.stocktrade.requests.ResourcesControllerTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2025-02-08 10:06:47.856  INFO 4601 --- [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.hackerrank.stocktrade.requests.ResourcesControllerTest]: ResourcesControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-02-08 10:06:47.860  INFO 4601 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.hackerrank.stocktrade.Application for test class com.hackerrank.stocktrade.requests.ResourcesControllerTest
2025-02-08 10:06:47.861  INFO 4601 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener]
2025-02-08 10:06:47.861  INFO 4601 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@1f641fb7, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@69dc7b24, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@297454f7, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@602b7944, org.springframework.test.context.support.DirtiesContextTestExecutionListener@5f8d4b51, org.springframework.test.context.transaction.TransactionalTestExecutionListener@55821edf, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@5e5a2b74, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@658098a2, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@50628080, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@155318b5, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@1add90e0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@7bf94e91]
2025-02-08 10:06:47.873 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_, trade0_.price as price2_0_, trade0_.shares as shares3_0_, trade0_.symbol as symbol4_0_, trade0_.timestamp as timestam5_0_, trade0_.type as type6_0_, trade0_.user_id as user_id7_0_ from trade trade0_
2025-02-08 10:06:47.875 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select user0_.id as id1_1_0_, user0_.name as name2_1_0_, trade1_.id as id1_0_1_, trade1_.price as price2_0_1_, trade1_.shares as shares3_0_1_, trade1_.symbol as symbol4_0_1_, trade1_.timestamp as timestam5_0_1_, trade1_.type as type6_0_1_, trade1_.user_id as user_id7_0_1_ from user user0_ left outer join trade trade1_ on user0_.id=trade1_.user_id where user0_.id=?
2025-02-08 10:06:47.875 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]
2025-02-08 10:06:47.876 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.user_id=?
2025-02-08 10:06:47.876 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]
2025-02-08 10:06:47.878  INFO 4601 --- [           main] o.h.e.internal.DefaultLoadEventListener  : HHH000327: Error performing load command : org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade

org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade
	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:90) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.entity.EntityLoader.loadByUniqueKey(EntityLoader.java:144) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.persister.entity.AbstractEntityPersister.loadByUniqueKey(AbstractEntityPersister.java:2351) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.type.EntityType.loadByUniqueKey(EntityType.java:739) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.type.EntityType.resolve(EntityType.java:467) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.performTwoPhaseLoad(AbstractRowReader.java:238) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.finishUp(AbstractRowReader.java:209) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.plan.exec.process.internal.ResultSetProcessorImpl.extractResults(ResultSetProcessorImpl.java:133) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:122) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:86) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader.load(AbstractLoadPlanBasedEntityLoader.java:188) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:4269) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:511) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:481) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:222) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:281) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.doOnLoad(DefaultLoadEventListener.java:124) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:92) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.internal.SessionImpl.fireLoad(SessionImpl.java:1257) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.internal.SessionImpl.internalLoad(SessionImpl.java:1140) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.type.EntityType.resolveIdentifier(EntityType.java:682) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.type.EntityType.resolve(EntityType.java:464) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.type.ManyToOneType.resolve(ManyToOneType.java:239) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:1151) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.processResultSet(Loader.java:1010) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.doQuery(Loader.java:948) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:340) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.doList(Loader.java:2689) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.doList(Loader.java:2672) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2506) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.list(Loader.java:2501) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:504) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:395) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:220) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1508) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1537) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1505) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.query.Query.getResultList(Query.java:135) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.query.criteria.internal.compile.CriteriaQueryTypeQueryAdapter.getResultList(CriteriaQueryTypeQueryAdapter.java:74) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:306) ~[spring-data-jpa-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:73) ~[spring-data-jpa-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294) ~[spring-tx-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98) ~[spring-tx-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) ~[spring-tx-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135) ~[spring-data-jpa-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at jdk.proxy2/jdk.proxy2.$Proxy105.findAll(Unknown Source) ~[na:na]
	at com.hackerrank.stocktrade.service.ResourcesService.eraseAllTradesRecordsIncludingUserRecords(ResourcesService.java:23) ~[classes/:na]
	at com.hackerrank.stocktrade.controller.ResourcesController.eraseAllTrades(ResourcesController.java:26) ~[classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:930) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:666) ~[tomcat-embed-core-9.0.13.jar:9.0.13]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:71) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.13.jar:9.0.13]
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:166) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:182) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at com.hackerrank.stocktrade.requests.ResourcesControllerTest.eraseAllRecords(ResourcesControllerTest.java:57) ~[test-classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55) ~[junit-4.12.jar:4.12]
	at org.junit.rules.RunRules.evaluate(RunRules.java:20) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) ~[junit-4.12.jar:4.12]
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.junit.rules.RunRules.evaluate(RunRules.java:20) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runners.Suite.runChild(Suite.java:128) ~[junit-4.12.jar:4.12]
	at org.junit.runners.Suite.runChild(Suite.java:27) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316) ~[surefire-junit4-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240) ~[surefire-junit4-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214) ~[surefire-junit4-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155) ~[surefire-junit4-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385) ~[surefire-booter-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162) ~[surefire-booter-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507) ~[surefire-booter-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495) ~[surefire-booter-3.2.5.jar:3.2.5]


MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 2, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "A", "shares": 19, "price": 153.57, "timestamp": "2016-12-28 13:15:52"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"A","shares":19,"price":153.57,"timestamp":"2016-12-28T18:15:52.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 3, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "A", "shares": 12, "price": 135.89, "timestamp": "2016-12-28 13:18:18"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":3,"name":"Derrick Garcia","trade":null},"symbol":"A","shares":12,"price":135.89,"timestamp":"2016-12-28T18:18:18.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 4, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 15, "price": 183.45, "timestamp": "2016-12-28 15:15:50"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":5,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":15,"price":183.45,"timestamp":"2016-12-28T20:15:50.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 5, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 10, "price": 190.73, "timestamp": "2016-12-29 09:05:23"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":6,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":10,"price":190.73,"timestamp":"2016-12-29T14:05:23.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 6, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 30, "price": 137.86, "timestamp": "2016-12-30 11:42:40"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":8,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":30,"price":137.86,"timestamp":"2016-12-30T16:42:40.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 7, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 19, "price": 183.45, "timestamp": "2016-12-30 12:35:21"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":10,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":19,"price":183.45,"timestamp":"2016-12-30T17:35:21.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 8, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "WEX", "shares": 11, "price": 172.35, "timestamp": "2016-12-30 13:07:19"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":11,"name":"Derrick Garcia","trade":null},"symbol":"WEX","shares":11,"price":172.35,"timestamp":"2016-12-30T18:07:19.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 9, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 25, "price": 154.77, "timestamp": "2016-12-30 13:36:20"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":25,"price":154.77,"timestamp":"2016-12-30T18:36:20.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 10, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "MMS", "shares": 28, "price": 152.93, "timestamp": "2016-12-30 14:48:14"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":13,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"MMS","shares":28,"price":152.93,"timestamp":"2016-12-30T19:48:14.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 11, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 30, "price": 154.77, "timestamp": "2016-12-31 09:59:16"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":14,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":30,"price":154.77,"timestamp":"2016-12-31T14:59:16.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 12, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 18, "price": 172.35, "timestamp": "2016-12-31 12:01:56"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":15,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":18,"price":172.35,"timestamp":"2016-12-31T17:01:56.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":17,"type":"buy","user":{"id":16,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/19
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/users/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/users/5
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/stocks/A
       Parameters = {type=[sell], start=[2016-12-28], end=[2017-01-03]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/stocks/AB
       Parameters = {type=[buy], start=[2016-12-28], end=[2016-12-29]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /stocks/A/price
       Parameters = {start=[2016-12-29], end=[2017-01-03]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /stocks/AB/price
       Parameters = {start=[2016-12-28], end=[2016-12-29]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

&amp#27;[0;31meraseAllRecords(com.hackerrank.stocktrade.requests.ResourcesControllerTest)&amp#27;[0m
&amp#27;[0;31morg.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1013)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:930)&amp#27;[0m
&amp#27;[0;31m	at javax.servlet.http.HttpServlet.service(HttpServlet.java:666)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:71)&amp#27;[0m
&amp#27;[0;31m	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:166)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:182)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.requests.ResourcesControllerTest.eraseAllRecords(ResourcesControllerTest.java:57)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:128)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)&amp#27;[0m
&amp#27;[0;31mCaused by: org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade&amp#27;[0m
&amp#27;[0;31m	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:351)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:253)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:153)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)&amp#27;[0m
&amp#27;[0;31m	at jdk.proxy2/jdk.proxy2.$Proxy105.findAll(Unknown Source)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.service.ResourcesService.eraseAllTradesRecordsIncludingUserRecords(ResourcesService.java:23)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.controller.ResourcesController.eraseAllTrades(ResourcesController.java:26)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)&amp#27;[0m
&amp#27;[0;31m	... 70 more&amp#27;[0m
&amp#27;[0;31mCaused by: org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:90)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.entity.EntityLoader.loadByUniqueKey(EntityLoader.java:144)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.persister.entity.AbstractEntityPersister.loadByUniqueKey(AbstractEntityPersister.java:2351)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.type.EntityType.loadByUniqueKey(EntityType.java:739)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.type.EntityType.resolve(EntityType.java:467)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.performTwoPhaseLoad(AbstractRowReader.java:238)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.finishUp(AbstractRowReader.java:209)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.plan.exec.process.internal.ResultSetProcessorImpl.extractResults(ResultSetProcessorImpl.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:122)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:86)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader.load(AbstractLoadPlanBasedEntityLoader.java:188)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:4269)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:511)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:481)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:222)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:281)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.doOnLoad(DefaultLoadEventListener.java:124)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:92)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.internal.SessionImpl.fireLoad(SessionImpl.java:1257)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.internal.SessionImpl.internalLoad(SessionImpl.java:1140)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.type.EntityType.resolveIdentifier(EntityType.java:682)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.type.EntityType.resolve(EntityType.java:464)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.type.ManyToOneType.resolve(ManyToOneType.java:239)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:1151)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.processResultSet(Loader.java:1010)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.doQuery(Loader.java:948)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:340)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.doList(Loader.java:2689)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.doList(Loader.java:2672)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2506)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.list(Loader.java:2501)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:504)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:395)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:220)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1508)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1537)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1505)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.query.Query.getResultList(Query.java:135)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.query.criteria.internal.compile.CriteriaQueryTypeQueryAdapter.getResultList(CriteriaQueryTypeQueryAdapter.java:74)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:306)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:73)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)&amp#27;[0m
&amp#27;[0;31m	... 94 more&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="findHighestAndLowestPriceByNonExistingStockSymbolInDateRange" classname="com.hackerrank.stocktrade.requests.NoResourcesStocksControllerTest" time="0.0">
    <system-out><![CDATA[2025-02-08 10:06:47.900  INFO 4601 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.hackerrank.stocktrade.requests.NoResourcesStocksControllerTest], using SpringBootContextLoader
2025-02-08 10:06:47.901  INFO 4601 --- [           main] o.s.t.c.support.AbstractContextLoader    : Could not detect default resource locations for test class [com.hackerrank.stocktrade.requests.NoResourcesStocksControllerTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2025-02-08 10:06:47.902  INFO 4601 --- [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.hackerrank.stocktrade.requests.NoResourcesStocksControllerTest]: NoResourcesStocksControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-02-08 10:06:47.904  INFO 4601 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.hackerrank.stocktrade.Application for test class com.hackerrank.stocktrade.requests.NoResourcesStocksControllerTest
2025-02-08 10:06:47.906  INFO 4601 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener]
2025-02-08 10:06:47.907  INFO 4601 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@af57949, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@f833223, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@5186b78a, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@3f6a9ba0, org.springframework.test.context.support.DirtiesContextTestExecutionListener@1e749235, org.springframework.test.context.transaction.TransactionalTestExecutionListener@870a9f2, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@6c2e7591, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@7f2542f, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@3dad8bde, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@301f9aa0, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@2f82e3cf, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@3a44993c]
]]></system-out>
  </testcase>
  <testcase name="findAllTradesByNonExistingStockSymbolAndTradeTypeInDateRange" classname="com.hackerrank.stocktrade.requests.NoResourcesTradesControllerTest" time="0.0">
    <system-out><![CDATA[2025-02-08 10:06:47.918  INFO 4601 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.hackerrank.stocktrade.requests.NoResourcesTradesControllerTest], using SpringBootContextLoader
2025-02-08 10:06:47.919  INFO 4601 --- [           main] o.s.t.c.support.AbstractContextLoader    : Could not detect default resource locations for test class [com.hackerrank.stocktrade.requests.NoResourcesTradesControllerTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2025-02-08 10:06:47.919  INFO 4601 --- [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.hackerrank.stocktrade.requests.NoResourcesTradesControllerTest]: NoResourcesTradesControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-02-08 10:06:47.923  INFO 4601 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.hackerrank.stocktrade.Application for test class com.hackerrank.stocktrade.requests.NoResourcesTradesControllerTest
2025-02-08 10:06:47.924  INFO 4601 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener]
2025-02-08 10:06:47.924  INFO 4601 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@7fc5a558, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@42fd8f2f, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@7eea934d, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@4700963e, org.springframework.test.context.support.DirtiesContextTestExecutionListener@153d14e3, org.springframework.test.context.transaction.TransactionalTestExecutionListener@3b17759c, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@11cdf948, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@523f3c29, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@2fd8b081, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@2fe38b73, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@511a307e, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@7aef8000]
]]></system-out>
  </testcase>
  <testcase name="findAllTrades" classname="com.hackerrank.stocktrade.requests.NoResourcesTradesControllerTest" time="0.224">
    <error message="Request processing failed; nested exception is org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade" type="org.springframework.web.util.NestedServletException"><![CDATA[org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1013)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:71)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:166)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:182)
	at com.hackerrank.stocktrade.requests.NoResourcesTradesControllerTest.findAllTrades(NoResourcesTradesControllerTest.java:90)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
Caused by: org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:351)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:253)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:153)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy2/jdk.proxy2.$Proxy105.findAll(Unknown Source)
	at com.hackerrank.stocktrade.service.TradeService.findAllTrades(TradeService.java:27)
	at com.hackerrank.stocktrade.controller.TradesController.getTrades(TradesController.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	... 70 more
Caused by: org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade
	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:90)
	at org.hibernate.loader.entity.EntityLoader.loadByUniqueKey(EntityLoader.java:144)
	at org.hibernate.persister.entity.AbstractEntityPersister.loadByUniqueKey(AbstractEntityPersister.java:2351)
	at org.hibernate.type.EntityType.loadByUniqueKey(EntityType.java:739)
	at org.hibernate.type.EntityType.resolve(EntityType.java:467)
	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172)
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129)
	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.performTwoPhaseLoad(AbstractRowReader.java:238)
	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.finishUp(AbstractRowReader.java:209)
	at org.hibernate.loader.plan.exec.process.internal.ResultSetProcessorImpl.extractResults(ResultSetProcessorImpl.java:133)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:122)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:86)
	at org.hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader.load(AbstractLoadPlanBasedEntityLoader.java:188)
	at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:4269)
	at org.hibernate.event.internal.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:511)
	at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:481)
	at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:222)
	at org.hibernate.event.internal.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:281)
	at org.hibernate.event.internal.DefaultLoadEventListener.doOnLoad(DefaultLoadEventListener.java:124)
	at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:92)
	at org.hibernate.internal.SessionImpl.fireLoad(SessionImpl.java:1257)
	at org.hibernate.internal.SessionImpl.internalLoad(SessionImpl.java:1140)
	at org.hibernate.type.EntityType.resolveIdentifier(EntityType.java:682)
	at org.hibernate.type.EntityType.resolve(EntityType.java:464)
	at org.hibernate.type.ManyToOneType.resolve(ManyToOneType.java:239)
	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172)
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129)
	at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:1151)
	at org.hibernate.loader.Loader.processResultSet(Loader.java:1010)
	at org.hibernate.loader.Loader.doQuery(Loader.java:948)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:340)
	at org.hibernate.loader.Loader.doList(Loader.java:2689)
	at org.hibernate.loader.Loader.doList(Loader.java:2672)
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2506)
	at org.hibernate.loader.Loader.list(Loader.java:2501)
	at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:504)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:395)
	at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:220)
	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1508)
	at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1537)
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1505)
	at org.hibernate.query.Query.getResultList(Query.java:135)
	at org.hibernate.query.criteria.internal.compile.CriteriaQueryTypeQueryAdapter.getResultList(CriteriaQueryTypeQueryAdapter.java:74)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:306)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:73)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	... 94 more
]]></error>
    <system-out><![CDATA[2025-02-08 10:06:47.937 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_, trade0_.price as price2_0_, trade0_.shares as shares3_0_, trade0_.symbol as symbol4_0_, trade0_.timestamp as timestam5_0_, trade0_.type as type6_0_, trade0_.user_id as user_id7_0_ from trade trade0_
2025-02-08 10:06:47.939 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select user0_.id as id1_1_0_, user0_.name as name2_1_0_, trade1_.id as id1_0_1_, trade1_.price as price2_0_1_, trade1_.shares as shares3_0_1_, trade1_.symbol as symbol4_0_1_, trade1_.timestamp as timestam5_0_1_, trade1_.type as type6_0_1_, trade1_.user_id as user_id7_0_1_ from user user0_ left outer join trade trade1_ on user0_.id=trade1_.user_id where user0_.id=?
2025-02-08 10:06:47.940 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]
2025-02-08 10:06:47.942 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.user_id=?
2025-02-08 10:06:47.943 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]
2025-02-08 10:06:47.946  INFO 4601 --- [           main] o.h.e.internal.DefaultLoadEventListener  : HHH000327: Error performing load command : org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade

org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade
	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:90) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.entity.EntityLoader.loadByUniqueKey(EntityLoader.java:144) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.persister.entity.AbstractEntityPersister.loadByUniqueKey(AbstractEntityPersister.java:2351) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.type.EntityType.loadByUniqueKey(EntityType.java:739) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.type.EntityType.resolve(EntityType.java:467) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.performTwoPhaseLoad(AbstractRowReader.java:238) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.finishUp(AbstractRowReader.java:209) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.plan.exec.process.internal.ResultSetProcessorImpl.extractResults(ResultSetProcessorImpl.java:133) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:122) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:86) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader.load(AbstractLoadPlanBasedEntityLoader.java:188) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:4269) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:511) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:481) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:222) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:281) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.doOnLoad(DefaultLoadEventListener.java:124) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:92) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.internal.SessionImpl.fireLoad(SessionImpl.java:1257) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.internal.SessionImpl.internalLoad(SessionImpl.java:1140) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.type.EntityType.resolveIdentifier(EntityType.java:682) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.type.EntityType.resolve(EntityType.java:464) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.type.ManyToOneType.resolve(ManyToOneType.java:239) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:1151) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.processResultSet(Loader.java:1010) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.doQuery(Loader.java:948) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:340) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.doList(Loader.java:2689) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.doList(Loader.java:2672) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2506) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.Loader.list(Loader.java:2501) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:504) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:395) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:220) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1508) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1537) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1505) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.query.Query.getResultList(Query.java:135) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.hibernate.query.criteria.internal.compile.CriteriaQueryTypeQueryAdapter.getResultList(CriteriaQueryTypeQueryAdapter.java:74) ~[hibernate-core-5.3.7.Final.jar:5.3.7.Final]
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:306) ~[spring-data-jpa-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:73) ~[spring-data-jpa-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294) ~[spring-tx-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98) ~[spring-tx-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) ~[spring-tx-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135) ~[spring-data-jpa-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61) ~[spring-data-commons-2.1.3.RELEASE.jar:2.1.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at jdk.proxy2/jdk.proxy2.$Proxy105.findAll(Unknown Source) ~[na:na]
	at com.hackerrank.stocktrade.service.TradeService.findAllTrades(TradeService.java:27) ~[classes/:na]
	at com.hackerrank.stocktrade.controller.TradesController.getTrades(TradesController.java:32) ~[classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.13.jar:9.0.13]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882) ~[spring-webmvc-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:71) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.13.jar:9.0.13]
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:166) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:182) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at com.hackerrank.stocktrade.requests.NoResourcesTradesControllerTest.findAllTrades(NoResourcesTradesControllerTest.java:90) ~[test-classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55) ~[junit-4.12.jar:4.12]
	at org.junit.rules.RunRules.evaluate(RunRules.java:20) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) ~[junit-4.12.jar:4.12]
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190) ~[spring-test-5.1.3.RELEASE.jar:5.1.3.RELEASE]
	at org.junit.rules.RunRules.evaluate(RunRules.java:20) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runners.Suite.runChild(Suite.java:128) ~[junit-4.12.jar:4.12]
	at org.junit.runners.Suite.runChild(Suite.java:27) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316) ~[surefire-junit4-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240) ~[surefire-junit4-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214) ~[surefire-junit4-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155) ~[surefire-junit4-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385) ~[surefire-booter-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162) ~[surefire-booter-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507) ~[surefire-booter-3.2.5.jar:3.2.5]
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495) ~[surefire-booter-3.2.5.jar:3.2.5]


MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 2, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "A", "shares": 19, "price": 153.57, "timestamp": "2016-12-28 13:15:52"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"A","shares":19,"price":153.57,"timestamp":"2016-12-28T18:15:52.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 3, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "A", "shares": 12, "price": 135.89, "timestamp": "2016-12-28 13:18:18"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":3,"name":"Derrick Garcia","trade":null},"symbol":"A","shares":12,"price":135.89,"timestamp":"2016-12-28T18:18:18.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 4, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 15, "price": 183.45, "timestamp": "2016-12-28 15:15:50"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":5,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":15,"price":183.45,"timestamp":"2016-12-28T20:15:50.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 5, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 10, "price": 190.73, "timestamp": "2016-12-29 09:05:23"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":6,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":10,"price":190.73,"timestamp":"2016-12-29T14:05:23.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 6, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 30, "price": 137.86, "timestamp": "2016-12-30 11:42:40"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":8,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":30,"price":137.86,"timestamp":"2016-12-30T16:42:40.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 7, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 19, "price": 183.45, "timestamp": "2016-12-30 12:35:21"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":10,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":19,"price":183.45,"timestamp":"2016-12-30T17:35:21.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 8, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "WEX", "shares": 11, "price": 172.35, "timestamp": "2016-12-30 13:07:19"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":11,"name":"Derrick Garcia","trade":null},"symbol":"WEX","shares":11,"price":172.35,"timestamp":"2016-12-30T18:07:19.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 9, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 25, "price": 154.77, "timestamp": "2016-12-30 13:36:20"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":25,"price":154.77,"timestamp":"2016-12-30T18:36:20.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 10, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "MMS", "shares": 28, "price": 152.93, "timestamp": "2016-12-30 14:48:14"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":13,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"MMS","shares":28,"price":152.93,"timestamp":"2016-12-30T19:48:14.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 11, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 30, "price": 154.77, "timestamp": "2016-12-31 09:59:16"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":14,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":30,"price":154.77,"timestamp":"2016-12-31T14:59:16.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 12, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 18, "price": 172.35, "timestamp": "2016-12-31 12:01:56"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":15,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":18,"price":172.35,"timestamp":"2016-12-31T17:01:56.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":17,"type":"buy","user":{"id":16,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/19
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/users/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/users/5
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/stocks/A
       Parameters = {type=[sell], start=[2016-12-28], end=[2017-01-03]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/stocks/AB
       Parameters = {type=[buy], start=[2016-12-28], end=[2016-12-29]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /stocks/A/price
       Parameters = {start=[2016-12-29], end=[2017-01-03]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /stocks/AB/price
       Parameters = {start=[2016-12-28], end=[2016-12-29]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /stocks/A/price
       Parameters = {start=[2017-01-05], end=[2017-01-06]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/stocks/A
       Parameters = {type=[buy], start=[2016-12-28], end=[2017-01-03]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

&amp#27;[0;31mfindAllTrades(com.hackerrank.stocktrade.requests.NoResourcesTradesControllerTest)&amp#27;[0m
&amp#27;[0;31morg.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1013)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)&amp#27;[0m
&amp#27;[0;31m	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:71)&amp#27;[0m
&amp#27;[0;31m	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:166)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:182)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.requests.NoResourcesTradesControllerTest.findAllTrades(NoResourcesTradesControllerTest.java:90)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:128)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)&amp#27;[0m
&amp#27;[0;31mCaused by: org.springframework.orm.jpa.JpaSystemException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade&amp#27;[0m
&amp#27;[0;31m	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:351)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:253)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:153)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)&amp#27;[0m
&amp#27;[0;31m	at jdk.proxy2/jdk.proxy2.$Proxy105.findAll(Unknown Source)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.service.TradeService.findAllTrades(TradeService.java:27)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.controller.TradesController.getTrades(TradesController.java:32)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)&amp#27;[0m
&amp#27;[0;31m	... 70 more&amp#27;[0m
&amp#27;[0;31mCaused by: org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: com.hackerrank.stocktrade.model.Trade&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:90)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.entity.EntityLoader.loadByUniqueKey(EntityLoader.java:144)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.persister.entity.AbstractEntityPersister.loadByUniqueKey(AbstractEntityPersister.java:2351)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.type.EntityType.loadByUniqueKey(EntityType.java:739)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.type.EntityType.resolve(EntityType.java:467)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.performTwoPhaseLoad(AbstractRowReader.java:238)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.finishUp(AbstractRowReader.java:209)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.plan.exec.process.internal.ResultSetProcessorImpl.extractResults(ResultSetProcessorImpl.java:133)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:122)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:86)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader.load(AbstractLoadPlanBasedEntityLoader.java:188)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:4269)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:511)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:481)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:222)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:281)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.doOnLoad(DefaultLoadEventListener.java:124)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:92)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.internal.SessionImpl.fireLoad(SessionImpl.java:1257)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.internal.SessionImpl.internalLoad(SessionImpl.java:1140)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.type.EntityType.resolveIdentifier(EntityType.java:682)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.type.EntityType.resolve(EntityType.java:464)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.type.ManyToOneType.resolve(ManyToOneType.java:239)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.engine.internal.TwoPhaseLoad.doInitializeEntity(TwoPhaseLoad.java:172)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:129)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:1151)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.processResultSet(Loader.java:1010)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.doQuery(Loader.java:948)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:340)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.doList(Loader.java:2689)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.doList(Loader.java:2672)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2506)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.Loader.list(Loader.java:2501)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:504)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:395)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:220)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1508)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1537)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1505)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.query.Query.getResultList(Query.java:135)&amp#27;[0m
&amp#27;[0;31m	at org.hibernate.query.criteria.internal.compile.CriteriaQueryTypeQueryAdapter.getResultList(CriteriaQueryTypeQueryAdapter.java:74)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:306)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:73)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)&amp#27;[0m
&amp#27;[0;31m	... 94 more&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="findAllTradesByNonExistingUserId" classname="com.hackerrank.stocktrade.requests.NoResourcesTradesControllerTest" time="0.0"/>
  <testcase name="findTradeByNonExistingId" classname="com.hackerrank.stocktrade.requests.NoResourcesTradesControllerTest" time="0.0"/>
  <testcase name="createTrade" classname="com.hackerrank.stocktrade.requests.NoResourcesTradesControllerTest" time="0.004">
    <system-out><![CDATA[2025-02-08 10:06:47.992 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.id=?
2025-02-08 10:06:47.992 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]
2025-02-08 10:06:47.993 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select user0_.id as id1_1_0_, user0_.name as name2_1_0_ from user user0_ where user0_.id=?
2025-02-08 10:06:47.993 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [4]
2025-02-08 10:06:47.994 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.994 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:47.995 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into user (name, id) values (?, ?)
2025-02-08 10:06:47.995 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [Derrick Garcia]
2025-02-08 10:06:47.995 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [BIGINT] - [18]
2025-02-08 10:06:47.996 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into trade (price, shares, symbol, timestamp, type, user_id, id) values (?, ?, ?, ?, ?, ?, ?)
2025-02-08 10:06:47.996 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [NUMERIC] - [154.77]
2025-02-08 10:06:47.996 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [INTEGER] - [11]
2025-02-08 10:06:47.996 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [ZAYO]
2025-02-08 10:06:47.996 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [TIMESTAMP] - [2016-12-28 11:44:37.0]
2025-02-08 10:06:47.996 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [5] as [VARCHAR] - [buy]
2025-02-08 10:06:47.997 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [6] as [BIGINT] - [18]
2025-02-08 10:06:47.997 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [7] as [BIGINT] - [19]
]]></system-out>
  </testcase>
  <testcase name="createTradeWithExistingId" classname="com.hackerrank.stocktrade.requests.NoResourcesTradesControllerTest" time="0.106">
    <failure message="Status expected:&lt;400&gt; but was:&lt;201&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<400> but was:<201>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:55)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:82)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:619)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:195)
	at com.hackerrank.stocktrade.requests.NoResourcesTradesControllerTest.createTradeWithExistingId(NoResourcesTradesControllerTest.java:204)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]></failure>
    <system-out><![CDATA[2025-02-08 10:06:48.018 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select trade0_.id as id1_0_1_, trade0_.price as price2_0_1_, trade0_.shares as shares3_0_1_, trade0_.symbol as symbol4_0_1_, trade0_.timestamp as timestam5_0_1_, trade0_.type as type6_0_1_, trade0_.user_id as user_id7_0_1_, user1_.id as id1_1_0_, user1_.name as name2_1_0_ from trade trade0_ left outer join user user1_ on trade0_.user_id=user1_.id where trade0_.id=?
2025-02-08 10:06:48.018 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]
2025-02-08 10:06:48.019 DEBUG 4601 --- [           main] org.hibernate.SQL                        : select user0_.id as id1_1_0_, user0_.name as name2_1_0_ from user user0_ where user0_.id=?
2025-02-08 10:06:48.019 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [4]
2025-02-08 10:06:48.019 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:48.020 DEBUG 4601 --- [           main] org.hibernate.SQL                        : call next value for hibernate_sequence
2025-02-08 10:06:48.020 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into user (name, id) values (?, ?)
2025-02-08 10:06:48.020 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [Derrick Garcia]
2025-02-08 10:06:48.020 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [BIGINT] - [20]
2025-02-08 10:06:48.021 DEBUG 4601 --- [           main] org.hibernate.SQL                        : insert into trade (price, shares, symbol, timestamp, type, user_id, id) values (?, ?, ?, ?, ?, ?, ?)
2025-02-08 10:06:48.021 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [NUMERIC] - [154.77]
2025-02-08 10:06:48.021 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [INTEGER] - [11]
2025-02-08 10:06:48.021 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [ZAYO]
2025-02-08 10:06:48.021 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [TIMESTAMP] - [2016-12-28 11:44:37.0]
2025-02-08 10:06:48.021 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [5] as [VARCHAR] - [buy]
2025-02-08 10:06:48.021 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [6] as [BIGINT] - [20]
2025-02-08 10:06:48.021 TRACE 4601 --- [           main] o.h.type.descriptor.sql.BasicBinder      : binding parameter [7] as [BIGINT] - [21]

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 2, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "A", "shares": 19, "price": 153.57, "timestamp": "2016-12-28 13:15:52"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":2,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"A","shares":19,"price":153.57,"timestamp":"2016-12-28T18:15:52.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 3, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "A", "shares": 12, "price": 135.89, "timestamp": "2016-12-28 13:18:18"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":3,"name":"Derrick Garcia","trade":null},"symbol":"A","shares":12,"price":135.89,"timestamp":"2016-12-28T18:18:18.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 4, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 15, "price": 183.45, "timestamp": "2016-12-28 15:15:50"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":4,"type":"buy","user":{"id":5,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":15,"price":183.45,"timestamp":"2016-12-28T20:15:50.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 5, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 10, "price": 190.73, "timestamp": "2016-12-29 09:05:23"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":6,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":10,"price":190.73,"timestamp":"2016-12-29T14:05:23.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 6, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 30, "price": 137.86, "timestamp": "2016-12-30 11:42:40"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":8,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":30,"price":137.86,"timestamp":"2016-12-30T16:42:40.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 7, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "MMS", "shares": 19, "price": 183.45, "timestamp": "2016-12-30 12:35:21"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":7,"type":"buy","user":{"id":10,"name":"Daniel Cortez","trade":null},"symbol":"MMS","shares":19,"price":183.45,"timestamp":"2016-12-30T17:35:21.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 8, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "WEX", "shares": 11, "price": 172.35, "timestamp": "2016-12-30 13:07:19"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":11,"name":"Derrick Garcia","trade":null},"symbol":"WEX","shares":11,"price":172.35,"timestamp":"2016-12-30T18:07:19.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 9, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 25, "price": 154.77, "timestamp": "2016-12-30 13:36:20"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":9,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":25,"price":154.77,"timestamp":"2016-12-30T18:36:20.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 10, "type": "buy", "user": {"id": 1, "name": "Jennifer Long"}, "symbol": "MMS", "shares": 28, "price": 152.93, "timestamp": "2016-12-30 14:48:14"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":13,"type":"buy","user":{"id":1,"name":"Jennifer Long","trade":null},"symbol":"MMS","shares":28,"price":152.93,"timestamp":"2016-12-30T19:48:14.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 11, "type": "buy", "user": {"id": 3, "name": "Connie Palmer"}, "symbol": "ZAYO", "shares": 30, "price": 154.77, "timestamp": "2016-12-31 09:59:16"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":14,"type":"buy","user":{"id":3,"name":"Connie Palmer","trade":null},"symbol":"ZAYO","shares":30,"price":154.77,"timestamp":"2016-12-31T14:59:16.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 12, "type": "buy", "user": {"id": 2, "name": "Daniel Cortez"}, "symbol": "WEX", "shares": 18, "price": 172.35, "timestamp": "2016-12-31 12:01:56"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":12,"type":"buy","user":{"id":15,"name":"Daniel Cortez","trade":null},"symbol":"WEX","shares":18,"price":172.35,"timestamp":"2016-12-31T17:01:56.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":17,"type":"buy","user":{"id":16,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/19
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/users/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/users/5
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/stocks/A
       Parameters = {type=[sell], start=[2016-12-28], end=[2017-01-03]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/stocks/AB
       Parameters = {type=[buy], start=[2016-12-28], end=[2016-12-29]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /stocks/A/price
       Parameters = {start=[2016-12-29], end=[2017-01-03]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /stocks/AB/price
       Parameters = {start=[2016-12-28], end=[2016-12-29]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /stocks/A/price
       Parameters = {start=[2017-01-05], end=[2017-01-06]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/stocks/A
       Parameters = {type=[buy], start=[2016-12-28], end=[2017-01-03]}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/users/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trades/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":19,"type":"buy","user":{"id":18,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /trades
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {"id": 1, "type": "buy", "user": {"id": 4, "name": "Derrick Garcia"}, "symbol": "ZAYO", "shares": 11, "price": 154.77, "timestamp": "2016-12-28 11:44:37"}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.stocktrade.controller.TradesController
           Method = public org.springframework.http.ResponseEntity<com.hackerrank.stocktrade.model.Trade> com.hackerrank.stocktrade.controller.TradesController.addTrade(com.hackerrank.stocktrade.model.Trade)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"id":21,"type":"buy","user":{"id":20,"name":"Derrick Garcia","trade":null},"symbol":"ZAYO","shares":11,"price":154.77,"timestamp":"2016-12-28T16:44:37.000+0000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

&amp#27;[0;31mcreateTradeWithExistingId(com.hackerrank.stocktrade.requests.NoResourcesTradesControllerTest)&amp#27;[0m
&amp#27;[0;31mjava.lang.AssertionError: Status expected:<400> but was:<201>&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:55)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:82)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:619)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:195)&amp#27;[0m
&amp#27;[0;31m	at com.hackerrank.stocktrade.requests.NoResourcesTradesControllerTest.createTradeWithExistingId(NoResourcesTradesControllerTest.java:204)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)&amp#27;[0m
&amp#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp#27;[0m
&amp#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp#27;[0m
&amp#27;[0;31m	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)&amp#27;[0m
&amp#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:128)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp#27;[0m
&amp#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp#27;[0m
&amp#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)&amp#27;[0m
&amp#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)&amp#27;[0m
]]></system-out>
  </testcase>
</testsuite>